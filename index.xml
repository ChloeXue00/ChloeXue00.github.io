<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>城市NOA功能竞品分析</title>
      <link>/posts/%E5%9F%8E%E5%B8%82noa%E7%AB%9E%E5%93%81%E6%8A%80%E6%9C%AF%E5%85%A8%E6%99%AF%E4%B8%8A%E4%BB%8Ebev%E5%88%B0vla%E6%8B%86%E8%A7%A3%E7%90%86%E6%83%B3%E5%B0%8F%E9%B9%8F%E8%94%9A%E6%9D%A5%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%B0%B4%E5%B2%AD/</link>
      <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/%E5%9F%8E%E5%B8%82noa%E7%AB%9E%E5%93%81%E6%8A%80%E6%9C%AF%E5%85%A8%E6%99%AF%E4%B8%8A%E4%BB%8Ebev%E5%88%B0vla%E6%8B%86%E8%A7%A3%E7%90%86%E6%83%B3%E5%B0%8F%E9%B9%8F%E8%94%9A%E6%9D%A5%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%B0%B4%E5%B2%AD/</guid>
      <description>&lt;p&gt;理想、小鹏、蔚来的&lt;/p&gt;
&lt;h1 id=&#34;城市noa技术战局上从bev到vla拆解头部玩家技术路线&#34;&gt;城市NOA技术战局（上）：从BEV到VLA，拆解头部玩家技术路线&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;主要结论：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继2023–2024年BEV+Transformer+Occupancy Network架构成为智能驾驶的感知主流后，2025年起，行业正加速向更高级的**VLM（Vision-Language Model）&lt;strong&gt;与&lt;/strong&gt;VLA（Vision-Language-Action）**模型演进。相较于传统BEV结构仅关注空间几何关系，VLM/VLA引入语言推理模块，可对标志、规则、指令进行语义理解，结合多模态输入（如摄像头图像、语音交互、交通文本信息），生成更泛化、更类人的行为决策。&lt;/p&gt;
&lt;p&gt;芯片与算力能力成为支撑城市NOA架构升级的关键基础。2020年前后主流平台算力集中于144 TOPS，如今已普遍跃升至500 TOPS以上，高端平台如蔚来NX9031、理想Thor-U、小鹏图灵AI芯片等更达到千级算力，支撑端到端推理、大模型部署与多模态处理。自研芯片、自建智算中心、自主模型训练正成为具备战略自主能力车企的核心壁垒。&lt;/p&gt;
&lt;p&gt;在感知侧，“视觉为主+激光雷达补盲”已成为当前主流配置。视觉方案具备数据规模与算力适配优势，激光雷达则增强空间精度与安全冗余，尤其在无高精地图场景中具备更强稳定性。不同厂商依据策略选择单感知或多模态融合方案，构建安全容错体系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;产品背景&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;近年来，随着特斯拉AutoPilot不断进阶至FSD，辅助驾驶已从L0级定速巡航，逐步拓展至高速NOA，再迈入城市NOA阶段，覆盖更复杂多变的交通环境。智能驾驶正在从“技术亮点”转向“核心卖点”，显著影响消费者购车决策。&lt;/p&gt;
&lt;p&gt;以小鹏和问界为例：小鹏G6智驾版配置占比超过70%，问界新M7的大定用户中也有60%以上选择搭载高阶智能驾驶方案。这一趋势标志着，中国智能驾驶市场已全面进入L2+/NOA功能的规模化普及阶段。&lt;/p&gt;
&lt;p&gt;L2+辅助驾驶能力包括自适应巡航（ACC）、车道居中控制（LCC）、自动变道（ALC）、高速NOA等，城市NOA则在此基础上，扩展至非结构化路况中的红绿灯通行、环岛绕行、路口博弈等复杂决策工况，对感知精度、决策智能与系统泛化能力提出更高要求。&lt;/p&gt;
&lt;p&gt;在城市NOA推进过程中，&lt;strong&gt;高精地图鲜度不足、覆盖受限、成本高昂等问题，成为核心瓶颈&lt;/strong&gt;。为突破此限制，主流技术路线正在从依赖地图的规则驱动方案，全面转向&lt;strong&gt;端到端模型驱动 + 自主环境建图 + 多模态策略融合&lt;/strong&gt;的新范式。&lt;/p&gt;
&lt;p&gt;技术架构上，感知模块经历了从前向2D视角 → BEV建图 → Occupancy Network建模的迭代，决策控制模块也正由传统rule-based状态机，向&lt;strong&gt;基于神经网络的端到端行为预测&lt;/strong&gt;发展。2025年起，VLM（视觉语言模型）和VLA（Vision-Language-Action）架构逐步上车，赋予系统语义理解与策略推理能力，成为当前算法演进的前沿方向。&lt;/p&gt;
&lt;p&gt;本报告将围绕特斯拉、小鹏、理想、蔚来等具备自研能力的头部品牌，梳理其城市NOA技术路线演进路径，结合软硬件系统方案与市场落地节奏，探讨中国品牌如何在“从BEV到VLA”的产业跃迁中建立领先优势。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;目标用户与使用场景&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;L2/L2+辅助驾驶系统主要面向具备一定驾驶经验、希望在日常通勤或长途驾驶中降低疲劳、提升安全性的新能源车主及购车潜在用户。&lt;/p&gt;
&lt;p&gt;这类用户普遍关注两个关键问题：&lt;/p&gt;
&lt;p&gt;各品牌城市NOA在不同城市、路况下的表现差异；&lt;/p&gt;
&lt;p&gt;智驾能力与整车价格之间的性价比。&lt;/p&gt;
&lt;p&gt;智能驾驶的核心价值在于：在用户监管下，系统能够预判潜在风险、辅助完成复杂驾驶动作，从而减轻认知负担、降低事故风险。尤其在城市NOA场景中，系统需完成红绿灯识别、路口博弈、避让行人、自主换道等行为，对系统泛化能力、策略鲁棒性和人机交互体验提出更高要求。&lt;/p&gt;
&lt;p&gt;因此，城市NOA不仅是“功能拓展”，更代表了整车系统智能化水平的“天花板”。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;竞品分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本篇章节主要对于特斯拉，以蔚来理想小鹏为代表的头部企业在“城市导航辅助驾驶功能”的进展上进行对比分析，除此之外还包括，硬件系统方案，软件算法，功能配置，交互逻辑，运营方案，亮点场景等对比。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 调研洞察摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;城市NOA的落地，标志着行业正从规则驱动向数据驱动、从模块化架构向端到端大模型架构转变。以下趋势尤为明显：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术架构趋同：&lt;/strong&gt; 特斯拉、小鹏、蔚来等主流厂商均采用BEV+Transformer+Occupancy Network感知结构，逐步引入端到端神经网络控制器替代传统状态机，提升整体智驾稳定性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算力平台升级：&lt;/strong&gt; 主流平台从原先144TOPS提升至500–1000TOPS以上，大算力平台成为支持端到端大模型部署的基础设施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据闭环能力强化：&lt;/strong&gt; 具备自动采集、筛选、标注、仿真重建与在线训练能力的“数据-模型-闭环”体系，成为城市NOA性能提升的核心引擎。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户体验导向增强：&lt;/strong&gt; 城市NOA正加速从试点区域向全国多城落地，主机厂纷纷围绕“全国都能开、用户真愿用”目标，推动功能迭代与大模型泛化能力提升。&lt;/p&gt;
&lt;p&gt;结论：&lt;strong&gt;在城市NOA成为新一代智能驾驶标配的背景下，能否构建“低成本、高泛化、大闭环”的自研体系，将成为厂商能否突围的核心分水岭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 技术方案演进与“去高精地图化”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高速NOA因场景结构稳定，长期采用规则驱动+高精地图方式实现；而城市NOA因存在海量动态变量与非结构化场景，传统Rule-based方案难以覆盖，&lt;strong&gt;技术路线普遍演进为以下三个阶段：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于高精地图的三段式结构：&lt;/strong&gt; 感知–规划–控制，依赖静态地图与有限状态机；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BEV+Transformer感知融合结构：&lt;/strong&gt; 引入Occupancy Network构建3D空间占据图，提升遮挡处理与障碍识别能力；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端到端 + 多模态语义推理架构（VLA）：&lt;/strong&gt; 引入视觉语言模型、扩散策略网络、博弈推理模块等，实现感知–理解–决策一体化。&lt;/p&gt;
&lt;p&gt;“去高精地图化”已成为城市NOA发展的行业共识，各家方案通过Occupancy Network、弱地图辅助、分布式建图等方式逐步替代静态地图依赖，以提升系统泛化能力与落地效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2.1 特斯拉技术演进：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;/images/NOA_image1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;自2014年发布AutoPilot 1.0以来，特斯拉持续引领辅助驾驶从规则驱动走向数据驱动、再走向端到端神经控制的范式演进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HW1.0 + Mobileye平台（2014–2016）：&lt;/strong&gt; 初代AutoPilot基于Mobileye方案，支持基本的巡航与车道保持功能，但受限于单摄像头配置与规则逻辑，系统泛化能力有限。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI汽车、自研底座与产品力跃迁</title>
      <link>/posts/%E6%B1%BD%E8%BD%A6%E8%A1%8C%E4%B8%9A%E6%99%BA%E8%83%BD%E5%8C%96%E4%B8%8B%E5%8D%8A%E5%9C%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E8%87%AA%E7%A0%94%E8%B6%8B%E5%8A%BF%E4%BB%A5%E5%8F%8A%E4%BA%A7%E5%93%81%E5%8A%9B%E8%B7%83%E8%BF%81/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/%E6%B1%BD%E8%BD%A6%E8%A1%8C%E4%B8%9A%E6%99%BA%E8%83%BD%E5%8C%96%E4%B8%8B%E5%8D%8A%E5%9C%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3%E7%9A%84%E8%87%AA%E7%A0%94%E8%B6%8B%E5%8A%BF%E4%BB%A5%E5%8F%8A%E4%BA%A7%E5%93%81%E5%8A%9B%E8%B7%83%E8%BF%81/</guid>
      <description>&lt;p&gt;&lt;strong&gt;汽车行业智能化下半场：人工智能时代的自研趋势以及产品力跃迁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本报告基于对当前中国主流智能车企技术路径的梳理，重点聚焦AI时代自研趋势、技术栈重构与用户体验跃迁路径，提出自研芯片+操作系统在产品竞争力打造中的关键价值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、引言：智能驾驶竞争进入“底层能力为王”阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着智能驾驶算法从传统的三段式架构逐步演化为统一大模型，底层算力的压力正在指数级上升。过去由规则驱动的架构，正逐步让位于数据驱动与模型推理为主导的新范式。小鹏、理想都曾表明目标是成为面向全球的AI汽车公司（&lt;a href=&#34;https://wallstreetcn.com/articles/3738111&#34;&gt;小鹏想成为面向全球的AI汽车公司&lt;/a&gt;，&lt;a href=&#34;https://stcn.com/article/detail/1468633.html&#34;&gt;李想“隐退”九个月后高调发声，要将理想汽车打造成AI公司&lt;/a&gt;）， 在这种趋势下，AI三要素中的&lt;strong&gt;数据和算力&lt;/strong&gt;，不再是支持角色，而正在成为影响智驾系统架构、决策能力和推理效率的“底层决定性资源”。&lt;/p&gt;
&lt;p&gt;以智能驾驶主控芯片为例，从2019年Mobileye EyeQ4的24 TOPS算力，到2023年NVIDIA Orin-X单颗256 TOPS，算力提升10倍以上，芯片价格和适配难度也随之飙升。公开数据显示，Orin-X 零售单价接近 500 美元，在算法开发完成后仍需4~6个月进行底层适配与算子调优。芯片不再是“模块化采购”的一环，而是演化为算法性能释放的“主控变量”。&lt;/p&gt;
&lt;p&gt;回顾历史，从智能手机厂商（如苹果、三星以及华为）到云厂商（如亚马逊、谷歌），都经历了&lt;strong&gt;通过自研芯片实现性能边界控制、系统主导权和成本结构优化，自研芯片已成为“技术驱动产品体验”的底层共识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对这一演进趋势，蔚小理纷纷加速芯片自研布局，希望打通“自研算法+定制芯片”的协同链条。在这条路径上，在国内厂商中，华为无疑走在更前一步——其MDC系列芯片已在极狐、阿维塔等平台落地，与ADS系统形成“芯片即平台”的整合模式。&lt;/p&gt;
&lt;p&gt;自研（智驾/座舱）芯片不仅提高了算力上限，降低了整车成本，同时让企业掌握底层算力与接口设计的主动权，从而决定了智驾域和座舱域&lt;strong&gt;从芯片架构、操作系统、通信协议到电子电器架构&lt;/strong&gt;等多个层级的自主可控程度。这些系统共同决定了智能驾驶系统的处理能力、响应速度、功能复用率和可持续升级能力。&lt;/p&gt;
&lt;p&gt;这一趋势正是推动智驾系统从“功能运营型”向“技术驱动型”转变的关键分水岭——决定其是跟随迭代，还是主导演进。&lt;/p&gt;
&lt;p&gt;但这场底层变革之战的真正价值，或许并不止于技术领先本身，而在于它能否带来一种“自我定义产品体验、构建自驱闭环”的能力边界重塑。&lt;strong&gt;自研芯片+自研架构+OS 作为企业软硬结合的锚点，其作用机制、投入路径与演进节奏，也因此成为观察智能车产业未来格局演化的关键切口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文将聚焦华为与小鹏两家典型代表，从技术栈演化、系统能力建构、用户体验反馈、品牌市场影响等多个维度展开分析，尝试还原自研芯片与操作系统背后，技术战略与产品能力之间的真实因果链条。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;二、以华为为例，解读OS+MDC+集中式架构带来的体验跃迁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MDC计算平台作为算力支撑，鸿蒙OS构建生态加强交互体验，集中式架构降低系统时延提升智驾功能表现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 华为 MDC 智能驾驶计算平台—自2018年起持续演进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规划与产品矩阵完善（2018–2021）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2018年3月，华为推出首款MDC智能驾驶计算平台，最初基于&lt;strong&gt;昇腾310芯片&lt;/strong&gt;，迄今已发展出包括&lt;strong&gt;MDC210、300F、610、810、Pro 610等&lt;/strong&gt;产品，覆盖从L2到L4的不同自动驾驶级别。2024年，搭载MDC610的车型可升级到ADS 3.0，为高阶城市NOA提供了算力基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更高算力平台到位（2021–2023）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随后推出的&lt;strong&gt;MDC810&lt;/strong&gt;以稠密算力峰值超400 TOPS，支持更复杂的多传感器融合与高精度感知，为L3前装落地铺设平台基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最新演进方向：MDC Pro 610系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截至2025年，华为MDC产品线已新增&lt;strong&gt;MDC Pro 610&lt;/strong&gt;等型号，搭载更高算力的昇腾610芯片，并采用12位LPDDR5+液冷散热方案，实现&lt;strong&gt;500–800+ TOPS算力&lt;/strong&gt;与更高能效密度。华为 MDC Pro 610 智能驾驶控制器主要用于执行融合、识别、分类任务，同时处理地图定位，以进行路径规划和驾驶决策，从而实现车辆的精确控制和自动驾驶。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3 麒麟芯片追赶高通地位，搭配鸿蒙OS，提升智能座舱交互体验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在智能汽车逐步迈入“全栈自研”的时代，操作系统作为底层能力承上启下，是实现&lt;strong&gt;软件解耦、整车协同和体验跃迁&lt;/strong&gt;的核心基座。华为率先部署三层操作系统体系——&lt;strong&gt;HarmonyOS OS（座舱）+ AOS（车控）+ VOS（智驾）&lt;/strong&gt;，不仅实现了智舱、智驾、车控的能力分离与协同调度，更通过操作系统的持续演进，显著提升整车的流畅性、智能性与安全性体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HarmonyOS：从“操作系统”到“生态系统”，提升人车交互体验&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为车载鸿蒙的重要落地形态，HarmonyOS 不仅承担座舱控制任务，更整合手机、平板、手表、家居IoT等跨终端生态能力，打造“万物互联”的空间体验：&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;分布式架构打造跨终端无缝协同体验，支持多设备间无缝流转（导航、通话、视频会议、音乐等）；&lt;/p&gt;
&lt;p&gt;语音助手基于端云协同大模型能力升级（如方舟语音大模型），具备更高意图理解力和情境感知；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;界面响应与流畅性极大提升&lt;/strong&gt;：借助统一内核与多线程渲染机制，复杂场景下UI响应延迟降低40%、用户交互成功率提升25%以上。&lt;/p&gt;
&lt;p&gt;如在问界M9、小鹏G6等车型上，鸿蒙座舱系统实现“智慧语音 + 视觉感知 + 空间音效 + 多设备协同”的沉浸式体验，显著领先传统车机。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;AOS：高实时性车控操作系统，提升系统响应稳定性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AOS是专为汽车底层控制场景设计的轻量级实时操作系统，以调度精度、冗余安全与定制能力为核心特性：&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;精确控制如转向、电机、车身等关键子系统&lt;/p&gt;
&lt;p&gt;对车规芯片如MCU/SoC适配性强，支持多线程任务管理与高优先级中断&lt;/p&gt;
&lt;p&gt;与自研芯片联合优化，可实现端到端时延&amp;lt;10ms、异常恢复时间&amp;lt;100ms的性能表现&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOP主要功能设计逻辑图（状态机）</title>
      <link>/posts/%E5%85%A8%E5%9F%9F%E9%A2%86%E8%88%AA%E8%BE%85%E5%8A%A9nop&#43;%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/%E5%85%A8%E5%9F%9F%E9%A2%86%E8%88%AA%E8%BE%85%E5%8A%A9nop&#43;%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;全域领航辅助nop&#34;&gt;全域领航辅助NOP+&lt;/h1&gt;
&lt;h2 id=&#34;1-产品概述&#34;&gt;1. 产品概述&lt;/h2&gt;
&lt;p&gt;全域领航辅助NOP+是一种舒适性功能，它是能让车辆根据导航规划好的路线进行行驶的辅助驾驶功能，能够完成如&lt;strong&gt;路口通行&lt;/strong&gt;、导航变道、超车变道、绕向车辆等驾驶任务。在面对&lt;strong&gt;施工区域、通用障碍物等场景时，车辆具有&lt;/strong&gt;安全能力，能够提供联通地面道路与城市快速路、高速公路的辅助驾驶体验。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png&#34; loading=&#34;lazy&#34; src=&#34;/images/nop_image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-车型配置&#34;&gt;2. 车型配置&lt;/h2&gt;
&lt;p&gt;本文档中提出的 &lt;strong&gt;NOP+&lt;/strong&gt; 全域领航辅助功能，配置在 ES8车型上。&lt;/p&gt;
&lt;h2 id=&#34;3-参考文档&#34;&gt;&lt;strong&gt;3. 参考文档&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;序号&lt;/th&gt;
          &lt;th&gt;文档编号&lt;/th&gt;
          &lt;th&gt;文档名&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;GBT 20608-2006&lt;/td&gt;
          &lt;td&gt;智能运输系统-自适应巡航控制系统-性能要求与检测方法&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;ISO 15622-2018&lt;/td&gt;
          &lt;td&gt;Intelligent Transport Systems-Adaptive Cruise Control&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;System-Performance Requirements and Test Procedures&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;ISO 22179-2009&lt;/td&gt;
          &lt;td&gt;Intelligent Transport Systems-Full Speed Range Adaptive Cruise&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Control (FSRA) Systems- Performance Requirements and Test&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Procedures&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;SAE J2399&lt;/td&gt;
          &lt;td&gt;Adaptive Cruise Control (ACC) Operating Characteristics and&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;User Interface&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;i-VISTA GM-MM-A0-2020&lt;/td&gt;
          &lt;td&gt;中国智能汽车指数管理办法 2020 版&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;i-VISTA SM-ADAS-ICAR-A0-2019&lt;/td&gt;
          &lt;td&gt;智能行车辅助评价规程 2020 版&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;i-VISTA SM-ADAS-ICAT-A0-2019&lt;/td&gt;
          &lt;td&gt;智能行车辅助试验规程 2020 版&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;中华人民共和国道路交通安全法&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;4-名词解释&#34;&gt;4. 名词解释&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;序号&lt;/th&gt;
          &lt;th&gt;缩写&lt;/th&gt;
          &lt;th&gt;全称&lt;/th&gt;
          &lt;th&gt;注释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;ACC&lt;/td&gt;
          &lt;td&gt;Adaptive Cruise Control&lt;/td&gt;
          &lt;td&gt;自适应巡航控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;Stop&amp;amp;Go&lt;/td&gt;
          &lt;td&gt;Stop and Go&lt;/td&gt;
          &lt;td&gt;自动启停&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;Override&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;超驰&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;ODC&lt;/td&gt;
          &lt;td&gt;Operational Design Condition&lt;/td&gt;
          &lt;td&gt;运行设计条件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;HMI&lt;/td&gt;
          &lt;td&gt;Human-Machine Interface&lt;/td&gt;
          &lt;td&gt;人机交互界面&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;TTC&lt;/td&gt;
          &lt;td&gt;Time To Collision&lt;/td&gt;
          &lt;td&gt;碰撞时间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;LCC&lt;/td&gt;
          &lt;td&gt;Lane Centering Control&lt;/td&gt;
          &lt;td&gt;车道居中辅助&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;NP&lt;/td&gt;
          &lt;td&gt;Nio Pilot&lt;/td&gt;
          &lt;td&gt;包括highway pilot、拥堵自动辅助驾驶traffic jam pilot&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;NOP&lt;/td&gt;
          &lt;td&gt;Navigation on Pilot&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;增强车道居中辅助&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;NOP+&lt;/td&gt;
          &lt;td&gt;Navigation on Pilot+&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;全域领航辅助&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;5-子功能介绍&#34;&gt;5. 子功能介绍&lt;/h2&gt;
&lt;p&gt;自动辅助驾驶Pilot包括&lt;strong&gt;高速自动辅助驾驶（highway pilot）&lt;/strong&gt;、&lt;strong&gt;拥堵自动辅助驾驶（traffic jam pilot)两种功能,&lt;/strong&gt; 主要适用于车道线清晰及有进入限制的封闭道路上使用，譬如高速和高架的主路及拥堵路段，&lt;strong&gt;且在本车道内行驶，不会换道变道行驶&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DRL 常见算法对比</title>
      <link>/posts/drl-algorithm-comparison/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/drl-algorithm-comparison/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;深度强化学习（Deep RL）发展出多个主流算法流派，包括基于值函数的 DQN、基于策略梯度的 REINFORCE/PPO，以及融合策略和值函数的 Actor-Critic 框架（如 A2C、DDPG、SAC）。每种方法适用于不同场景，选择合适算法将显著影响模型性能与训练效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三大算法流派对比&#34;&gt;三大算法流派对比&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;算法类型&lt;/th&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;优点&lt;/th&gt;
          &lt;th&gt;局限&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Value-based&lt;/td&gt;
          &lt;td&gt;学习 Q(s, a) 并通过贪婪策略选动作&lt;/td&gt;
          &lt;td&gt;样本利用率高，适合离散动作空间&lt;/td&gt;
          &lt;td&gt;不适用于连续/高维动作&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Policy-based&lt;/td&gt;
          &lt;td&gt;直接建模并优化策略 π(a&lt;/td&gt;
          &lt;td&gt;s)&lt;/td&gt;
          &lt;td&gt;适合连续动作，训练稳定&lt;/td&gt;
          &lt;td&gt;样本效率低，梯度方差大&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Actor-Critic&lt;/td&gt;
          &lt;td&gt;同时训练策略和价值函数&lt;/td&gt;
          &lt;td&gt;综合两者优势，适用于复杂控制问题&lt;/td&gt;
          &lt;td&gt;架构复杂，对超参数敏感&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一dqndeep-q-network&#34;&gt;一、DQN（Deep Q-Network）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;类型&lt;/strong&gt;：Value-based&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;损失函数（均方 TD 误差）&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;L(θ) = 𝔼ₜ [(rₜ + γ · maxₐ′ Qθ⁻(sₜ₊₁, a′) − Qθ(sₜ, aₜ))²]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;θ 是 Q 网络参数&lt;/li&gt;
&lt;li&gt;θ⁻ 是目标网络参数（定期同步）&lt;/li&gt;
&lt;li&gt;使用贪婪策略选择 &lt;code&gt;a′ = argmax Q(s′, a′)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优化器&lt;/strong&gt;：Adam 或 SGD，通过反向传播最小化 TD 误差更新 θ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>四叉树与 MPC 集成在机器人导航中的应用</title>
      <link>/posts/quadtree_integrate_mpc/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/quadtree_integrate_mpc/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;p&gt;本篇文档介绍了如何将&lt;strong&gt;四叉树（QuadTree）空间表示法&lt;/strong&gt;与**模型预测控制（MPC）**集成，用于复杂环境下的机器人路径规划。&lt;/p&gt;
&lt;p&gt;该架构的优势在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;四叉树&lt;/strong&gt; 提供了适应环境复杂度的空间划分与凸包区域&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MPC&lt;/strong&gt; 可在动态、带约束的前瞻性框架下生成最优控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;核心思想是：将四叉树节点生成的&lt;strong&gt;凸包区域&lt;/strong&gt;转化为&lt;strong&gt;线性不等式约束&lt;/strong&gt;，供 MPC 在轨迹优化中使用，完成避障与路径限制。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;架构图&#34;&gt;架构图&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   
环境地图 ────► 四叉树分解 ────►凸包生成 

                                            │
                                            ▼

机器人控制 ◄──── MPC优化器 ◄────线性几何约束
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;四叉树地图表示&#34;&gt;四叉树地图表示&lt;/h2&gt;
&lt;p&gt;四叉树将环境划分为不同分辨率的空间单元：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放区域使用较大的节点&lt;/li&gt;
&lt;li&gt;障碍物附近使用更小的细节节点&lt;/li&gt;
&lt;li&gt;仅保留表示自由区域的叶子节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优势&#34;&gt;优势&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自适应分辨率&lt;/strong&gt;：按需细化，避免资源浪费&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存友好&lt;/strong&gt;：比统一网格更节省存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多分辨率路径规划&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;凸包区域构建&#34;&gt;凸包区域构建&lt;/h2&gt;
&lt;p&gt;四叉树分解完成后：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将每个自由叶子节点看作不规则区域&lt;/li&gt;
&lt;li&gt;为每个叶子节点生成一个凸包（Convex Hull）&lt;/li&gt;
&lt;li&gt;这些凸包表示机器人可以安全通行的区域&lt;/li&gt;
&lt;li&gt;邻接凸包间连接形成路径图
&lt;img alt=&#34;四叉树分解链接凸包形成路径图&#34; loading=&#34;lazy&#34; src=&#34;/images/quadtree_path_planning.png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mpc-所需的约束生成方式&#34;&gt;MPC 所需的约束生成方式&lt;/h2&gt;
&lt;p&gt;对于路径经过的每个凸包区域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;凸包每条边转化为半空间线性约束 &lt;code&gt;ax + by + c ≤ 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;约束的法向量需朝向&lt;strong&gt;凸包外部&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;保证 MPC 优化轨迹始终在凸包（安全区）内&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数学上，对于边 &lt;code&gt;(x₁,y₁)&lt;/code&gt; → &lt;code&gt;(x₂,y₂)&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a = -(y₂ - y₁)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b =  (x₂ - x₁)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c = -ax₁ - by₁
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;约束形式为：&lt;code&gt;ax + by + c ≤ 0&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何训练用于狭窄通道规划的 DRL 策略？</title>
      <link>/posts/narrow_exploration/</link>
      <pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/narrow_exploration/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;狭窄通道&#34;&gt;在这个混合路径规划系统中，DRL 策略负责接管那些局部空间极端受限、传统 MPC 难以生效的区域，特别是“狭窄通道（narrow passage）”问题。为此，我们构建了一个专门应对该类场景的 DRL 策略，并通过 TD3 或 DDPG 算法进行训练。
&lt;img alt=&#34;狭窄通道&#34; loading=&#34;lazy&#34; src=&#34;/images/hybrid_image_result.png&#34;&gt;&lt;/h2&gt;
&lt;h2 id=&#34;1-使用的算法与损失函数&#34;&gt;1. 使用的算法与损失函数&lt;/h2&gt;
&lt;p&gt;我们使用 &lt;strong&gt;TD3 或 DDPG&lt;/strong&gt; 算法，分别训练策略网络（Actor）和价值网络（Critic）。&lt;/p&gt;
&lt;h3 id=&#34;ddpg&#34;&gt;DDPG&lt;/h3&gt;
&lt;p&gt;DDPG 有时能够实现出色的性能，但它在超参数和其他类型的调优方面往往很脆弱。DDPG 的一个常见故障模式是，学习到的 Q 函数开始大幅高估 Q 值，从而导致策略破坏，因为它利用了 Q 函数中的误差。&lt;/p&gt;
&lt;h3 id=&#34;td3&#34;&gt;TD3&lt;/h3&gt;
&lt;p&gt;td3 在DDPG基础上做到了三个技巧的更新，解决DDPG Q值过高的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;技巧1： 裁剪双Q学习
TD3学习两个Q函数 而不是一个（因此称为twin），并使用两个Q值比较小的一个作为bellman误差损失函数中的目标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技巧2： “延迟”策略更新
TD3 更新策略和目标网络的频率低于Q函数，本文建议没更新两次Q函数就进行依次策略更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;技巧2： 目标策略平滑
TD3为目标动作添加了噪声，通过平滑动作中的Q的变化，使策略更难利用Q函数误差
这三个技巧可以显著提高baseline DDPG 的性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TD3 是一种off-policy algorithm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TD3 只能用于具有连续动作空间的环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TD3 的Spinning up实现不支持并行化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键方程式：
TD3通过 均方bellman误差最小化的同时 学习两个Q函数Q_phi_1和Q_phi_2， 其方式于DDPG学习单个Q函数的方式几乎相同，
为了准确展示TD3的实现方式， 以及它与普通DDPG的区别，我们将从损失函数的最内层向外进行讲解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一：目标策略平滑
用于构成Q学习目标的动作 基于目标策略/mu_theta_targ , 但在动作的每个维度上添加了截断噪声。添加阶段噪声后，目标动作将被阶段， 使其位于有效动作范围内（所有有效动作，都满足alpha_low &amp;lt;= alpha &amp;lt;= alpha_high）。因此，目标动作如下：
&lt;img alt=&#34;目标动作方程&#34; loading=&#34;lazy&#34; src=&#34;/images/td3_target_action.png&#34;&gt;
目标策略平滑本质上充当了算法的正则化器（正则化是一组用于减少机器学习模型中过拟合的方法。正则化会用训练准确性的边际下降来换取泛化性的提高。 正则化包含一系列用于纠正机器学习模型过拟合问题的方法。）
它解决了DDPG中可能出现的一种特殊故障模式：如果Q函数逼近器针对某些动作产生了错误的尖峰，策略就会迅速利用改封至，从而导致脆弱或错误的行为。
这种情况可以通过平滑类似动作的Q函数来避免，
而这正是目标策略平滑的设计初衷。&lt;/p&gt;</description>
    </item>
    <item>
      <title>路径规划（三） 如何将 QuadTree 输出路径接入 MPC 控制器进行轨迹优化？</title>
      <link>/posts/quadtree_to_mpc/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/quadtree_to_mpc/</guid>
      <description>&lt;h2 id=&#34;背景介绍路径规划--控制的解耦-vs-联合&#34;&gt;背景介绍：路径规划 + 控制的解耦 vs 联合&lt;/h2&gt;
&lt;p&gt;在移动机器人导航中，路径规划（如基于地图构建的搜索）与轨迹跟踪（如模型预测控制 MPC）通常被拆解为两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规划模块&lt;/strong&gt;：找到一条从起点到目标的无碰路径&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制模块&lt;/strong&gt;：跟随这条路径，使机器人平稳、可控地到达目标&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但在复杂环境中，尤其是动态障碍物、曲折通道等场景中，如果不能做好两者的耦合与接口设计，系统效果会受到很大限制。&lt;/p&gt;
&lt;p&gt;本项目采用 &lt;strong&gt;四叉树（QuadTree）划分安全区域 + MPC 控制器跟踪轨迹&lt;/strong&gt; 的结构，成功实现了一个典型的路径→控制联合流程。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一步通过-quadtree-提取可行路径&#34;&gt;第一步：通过 QuadTree 提取可行路径&lt;/h2&gt;
&lt;p&gt;我们使用 &lt;code&gt;connective_quadtree&lt;/code&gt; 构建了一个基于图的四叉树分区系统，它可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在任意障碍物地图上生成 QuadTree 结构&lt;/li&gt;
&lt;li&gt;快速查询从 &lt;code&gt;start_pos&lt;/code&gt; 到 &lt;code&gt;goal_pos&lt;/code&gt; 的路径节点&lt;/li&gt;
&lt;li&gt;每个叶子节点有 &lt;code&gt;center()&lt;/code&gt;，表示其几何中心&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quadtree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_path(start_pos[:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], goal_pos[:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;path_points &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;center() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; node_id &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path_nodes]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里输出的是一个 [(x0, y0), (x1, y1), &amp;hellip;] 的路径点序列，尚不能直接用于控制器输入。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二步mpc-控制器的输入格式要求&#34;&gt;第二步：MPC 控制器的输入格式要求&lt;/h2&gt;
&lt;p&gt;为了让 MPC 能正常运行，需要如下格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initial_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x, y, yaw, v]  &lt;span style=&#34;color:#75715e&#34;&gt;# 当前状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reference_trajectory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([[x0, y0], [x1, y1], &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;控制器内部会基于参考轨迹进行插值、预测、代价优化。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三步桥接逻辑实现完整整合流程&#34;&gt;第三步：桥接逻辑实现（完整整合流程）&lt;/h2&gt;
&lt;p&gt;我们在 &lt;code&gt;trajectory_generator.py&lt;/code&gt; 中实现了完整的桥接类 &lt;code&gt;TrajectoryGenerator&lt;/code&gt;，封装逻辑如下：&lt;/p&gt;
&lt;h3 id=&#34;路径转为-mpc-输入轨迹&#34;&gt;路径转为 MPC 输入轨迹&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ref_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PathNodeList([PathNode(p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; path_points])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_ref_trajectory(ref_path)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这一过程自动插值生成 &lt;code&gt;TrajectoryNodeList&lt;/code&gt;（x, y, theta），最终用于 MPC 滑窗轨迹。&lt;/p&gt;</description>
    </item>
    <item>
      <title>路径规划（二）从占用图到安全区域：四叉树（QuadTree）构建与凸包生成</title>
      <link>/posts/quadtree_safearea/</link>
      <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/quadtree_safearea/</guid>
      <description>详解如何从占用图Occupancy Map生成QuadTree结构，并构建安全走廊区域用于机器人路径规划。</description>
    </item>
    <item>
      <title>为什么以及如何集成四叉树 &#43; MPC &#43; DRL 进行机器人轨迹规划？</title>
      <link>/posts/hybrid-planner-integration/</link>
      <pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/hybrid-planner-integration/</guid>
      <description>&lt;p&gt;在复杂的动态环境中，单一的路径规划或控制策略常常难以兼顾全局最优性与局部可行性。本篇博客介绍一个结合了 &lt;strong&gt;四叉树（QuadTree）+ 模型预测控制（MPC）+ 深度强化学习（DRL）&lt;/strong&gt; 的混合轨迹规划框架，该方案的主模块集中在 &lt;code&gt;helper_main_continous.py&lt;/code&gt; 文件中，具备良好的模块化与通用性。
&lt;img alt=&#34;机器人DRL轨迹图&#34; loading=&#34;lazy&#34; src=&#34;/images/hybrid_control_result.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;一模块概览&#34;&gt;一、模块概览&lt;/h2&gt;
&lt;h3 id=&#34;1-地图生成与表示&#34;&gt;1. 地图生成与表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;generate_map()&lt;/code&gt;：支持多场景自动生成地图，包括边界、静态/动态障碍物与目标点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_geometric_map()&lt;/code&gt;：将地图对象转换为可用于膨胀和路径推理的几何结构。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Inflator&lt;/code&gt; 类：对障碍物轮廓进行 buffer 膨胀，提升安全冗余。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-四叉树路径规划模块&#34;&gt;2. 四叉树路径规划模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由外部函数 &lt;code&gt;create_quadtree_from_occupancy_map()&lt;/code&gt; 从栅格占用地图创建四叉树划分空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quadtree_to_mpc_constraints()&lt;/code&gt;（外部实现）：提取四叉树路径节点所在区域的凸包，生成可传递给 MPC 的约束区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-mpc-控制器接口&#34;&gt;3. MPC 控制器接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;InterfaceMpc&lt;/code&gt;（外部模块）：支持静态/动态障碍物约束注入与轨迹生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;integrate_quadtree_with_mpc()&lt;/code&gt;：将自由空间区域和动态障碍一起传入 MPC，生成优化轨迹。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-drl-策略控制&#34;&gt;4. DRL 策略控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;控制逻辑中支持调用训练好的 DDPG / TD3 策略模型预测动作。&lt;/li&gt;
&lt;li&gt;动作 smoothness 与可行性在 &lt;code&gt;Metrics&lt;/code&gt; 中有单独评估指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-智能切换模块&#34;&gt;5. 智能切换模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HintSwitcher&lt;/code&gt;：在 MPC 不再可行或目标区域过于复杂时，切换至 DRL 策略接管。&lt;/li&gt;
&lt;li&gt;切换机制基于当前轨迹与障碍物距离，具备滞回机制避免频繁切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二系统整体工作流程&#34;&gt;二、系统整体工作流程&lt;/h2&gt;
&lt;p&gt;以下代码片段概括了系统的主要运行步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Step 1: 创建地图对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; generate_map()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mpc_controller &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; InterfaceMpc(map_data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Configurator()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Step 2: 四叉树路径规划&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;quadtree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_quadtree_from_occupancy_map(occupancy_map)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; quadtree_to_mpc_constraints(quadtree, current_state, goal_state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Step 3: MPC 轨迹生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mpc_controller&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update_static_constraints(constraints)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trajectory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mpc_controller&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate_trajectory(current_state, goal_state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Step 4: 智能控制切换（DRL or MPC）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;switcher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HintSwitcher(max_switch_distance&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;, min_detach_distance&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; switcher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;switch(current_position, original_traj, new_traj, obstacle_list):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drl_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(observation)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mpc_controller&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_control_action()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;三关键函数解读&#34;&gt;三、关键函数解读&lt;/h2&gt;
&lt;h3 id=&#34;quadtree_to_mpc_constraints&#34;&gt;&lt;code&gt;quadtree_to_mpc_constraints&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;将路径所经过的四叉树节点提取对应的多边形凸包作为可通行区域，转换为 MPC 优化器所需的约束形式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DRL训练</title>
      <link>/posts/how-to-train-drl-model/</link>
      <pubDate>Fri, 02 May 2025 00:00:00 +0000</pubDate>
      <guid>/posts/how-to-train-drl-model/</guid>
      <description>&lt;p&gt;在深度强化学习（Deep Reinforcement Learning）中，我们的目标是：训练一个智能体（Agent），使其能够在复杂环境中通过交互、试错和学习，掌握解决任务的策略。&lt;/p&gt;
&lt;p&gt;整个训练流程不是一行 &lt;code&gt;.fit()&lt;/code&gt; 就能完成的，它涉及数据采集、策略评估、价值估计、梯度优化等多个协同模块。本文将逐步介绍训练所需的关键模块和完整流程。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;drl-训练流程的核心结构&#34;&gt;DRL 训练流程的核心结构&lt;/h2&gt;
&lt;p&gt;一个标准的 DRL 系统至少包括以下几个部分：&lt;/p&gt;
&lt;h3 id=&#34;1-环境environment&#34;&gt;1. 环境（Environment）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供 &lt;code&gt;reset()&lt;/code&gt; 和 &lt;code&gt;step(action)&lt;/code&gt; 接口&lt;/li&gt;
&lt;li&gt;返回状态、奖励、终止信号和调试信息&lt;/li&gt;
&lt;li&gt;通常使用 Gymnasium 编写，也可以是仿真器（如 PyBullet、AirSim）或实际系统接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-策略网络policy-network&#34;&gt;2. 策略网络（Policy Network）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;输入当前状态，输出一个动作（或动作分布）&lt;/li&gt;
&lt;li&gt;对于离散动作空间，常见输出为 softmax 分布；连续动作空间则直接输出浮点数&lt;/li&gt;
&lt;li&gt;通常是 MLP（结构化输入）或 CNN（图像输入）网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-值函数网络critic-可选&#34;&gt;3. 值函数网络（Critic, 可选）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于评估当前策略下某状态的“好坏”，即状态值 V(s) 或动作值 Q(s,a)&lt;/li&gt;
&lt;li&gt;在 Actor-Critic 架构中，Actor 提出动作，Critic 提供反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-回放缓存replay-buffer&#34;&gt;4. 回放缓存（Replay Buffer）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;保存经验 &lt;code&gt;(state, action, reward, next_state, done)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持随机采样，避免训练中数据高度相关&lt;/li&gt;
&lt;li&gt;对于 off-policy 算法（如 DDPG、TD3）是必要组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-优化器与更新规则optimizer&#34;&gt;5. 优化器与更新规则（Optimizer）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据策略梯度、TD 误差、KL 散度等损失函数对网络参数进行更新&lt;/li&gt;
&lt;li&gt;通常使用 Adam 优化器&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;强化学习算法的三种主流架构&#34;&gt;强化学习算法的三种主流架构&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法类别&lt;/th&gt;
          &lt;th&gt;特点&lt;/th&gt;
          &lt;th&gt;代表算法&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Policy-based&lt;/td&gt;
          &lt;td&gt;直接建模并优化策略 π(a,s)，通过最大化期望回报更新策略&lt;/td&gt;
          &lt;td&gt;REINFORCE, PPO, TRPO&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Value-based&lt;/td&gt;
          &lt;td&gt;学习动作价值函数 Q(s,a)，通过贪婪策略导出动作选择&lt;/td&gt;
          &lt;td&gt;DQN, Double DQN, Dueling DQN&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Actor-Critic&lt;/td&gt;
          &lt;td&gt;同时学习策略和价值函数，策略用于决策，价值函数用于评估&lt;/td&gt;
          &lt;td&gt;A2C, A3C, DDPG, TD3, SAC, PPO&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Policy-based&lt;/strong&gt; 方法训练稳定性强、适合高维动作空间，但样本效率较低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value-based&lt;/strong&gt; 方法样本效率较高，适用于离散动作任务，但连续控制较困难。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actor-Critic&lt;/strong&gt; 综合两者优势，是当前主流算法的主干框架。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一个完整训练循环的结构&#34;&gt;一个完整训练循环的结构&lt;/h2&gt;
&lt;p&gt;以下是一个 off-policy 强化学习算法（如 DDPG）的大致流程：&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何合并多个 Safe Area 以简化规划图结构？</title>
      <link>/posts/merge_safe_areas/</link>
      <pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/merge_safe_areas/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;背景为什么要合并-safe-area&#34;&gt;背景：为什么要合并 Safe Area？&lt;/h2&gt;
&lt;p&gt;在使用 QuadTree 构建环境分区时，每一个 &lt;code&gt;FREE&lt;/code&gt; 类型的叶子节点都会生成一个凸包（Convex Hull）作为局部的 Safe Area。但随着环境分辨率提高或障碍物分布稠密，Safe Area 数量可能激增，带来以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径图节点数量过多，导致 A* 搜索复杂度提升&lt;/li&gt;
&lt;li&gt;MPC 控制器的参考轨迹中断多，规划不平滑&lt;/li&gt;
&lt;li&gt;可视化和维护困难&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，&lt;strong&gt;将临近的 Safe Area 合并为更大的安全区域&lt;/strong&gt; 是简化规划图结构、提高控制性能的重要手段。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;合并判据设计&#34;&gt;合并判据设计&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;connective_quadtree.py&lt;/code&gt; 和 &lt;code&gt;utils_geo.py&lt;/code&gt; 中，我们可以基于以下原则实现 Safe Area 合并：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;邻接性&lt;/strong&gt;：两个凸包边界是否接近或重合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;几何相容性&lt;/strong&gt;：合并后的点集是否仍然可以构成一个有效凸包&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面积提升评估&lt;/strong&gt;：合并后凸包面积未显著膨胀，避免引入死角区域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;利用 &lt;code&gt;shapely&lt;/code&gt; 和 &lt;code&gt;scipy.spatial.ConvexHull&lt;/code&gt;，可以进行合并模拟与几何判断。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;合并过程实现思路&#34;&gt;合并过程实现思路&lt;/h2&gt;
&lt;p&gt;合并逻辑可以封装为 &lt;code&gt;merge_safe_areas()&lt;/code&gt; 函数，并添加到 &lt;code&gt;QuadTree&lt;/code&gt; 类中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;merge_safe_areas&lt;/span&gt;(self, distance_threshold&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    merged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convex_hulls&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(keys)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        id1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keys[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; id1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; used: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        hull1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convex_hulls[id1]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        points1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hull1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points[hull1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(keys)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            id2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keys[j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; id2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; used: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hull2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convex_hulls[id2]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            points2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hull2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;points[hull2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vertices]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 判断是否可合并（如边界相近、联合后仍凸）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; can_merge(points1, points2, distance_threshold):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                combined &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vstack((points1, points2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                new_hull &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ConvexHull(combined)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                merged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(new_hull)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                used&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update([id1, id2])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convex_hulls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;merged_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;: hull &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, hull &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(merged)}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;can_merge()&lt;/code&gt; 可以使用 &lt;code&gt;shapely.Polygon&lt;/code&gt; 判断是否相交或几何接近。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于ResNet&#43;LSTM的端到端自动驾驶转向预测</title>
      <link>/posts/e2e-driving-resnet-lstm/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/posts/e2e-driving-resnet-lstm/</guid>
      <description>&lt;h2 id=&#34;项目背景&#34;&gt;项目背景&lt;/h2&gt;
&lt;p&gt;本项目旨在探索如何使用卷积神经网络（ResNet）提取图像空间特征，并结合LSTM对时序依赖进行建模，从而预测车辆在自动驾驶中的转向角度。&lt;/p&gt;
&lt;p&gt;此任务属于端到端自动驾驶建模的一部分，重点在于将连续图像帧映射为连续控制输出（方向盘角度）。&lt;/p&gt;
&lt;h2 id=&#34;模型结构概览&#34;&gt;模型结构概览&lt;/h2&gt;
&lt;p&gt;整体结构采用两阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ResNet 特征提取&lt;/strong&gt;：对每帧输入图像进行空间编码,提取每一帧的空间语义信息，如车道线、前车位置等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LSTM 序列建模&lt;/strong&gt;：将序列化的图像特征送入LSTM，实现对短期历史状态的记忆和对当前状态的连续预测,预测未来1~N帧的角度&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;模型结构图&#34;&gt;模型结构图&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;模型结构&#34; loading=&#34;lazy&#34; src=&#34;/images/model_diagram_v2.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据与预处理&#34;&gt;数据与预处理&lt;/h2&gt;
&lt;p&gt;数据来源为模拟驾驶场景中的中心摄像头图像，标签为方向盘角度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入帧尺寸统一为 224x224&lt;/li&gt;
&lt;li&gt;标签为每帧角度（可选包含扭矩、车速）&lt;/li&gt;
&lt;li&gt;图像预处理：resize → normalize → batch&lt;/li&gt;
&lt;li&gt;标签标准化：使用均值/方差归一化角度值&lt;/li&gt;
&lt;li&gt;损失函数：MSE 均方误差损失&lt;/li&gt;
&lt;li&gt;优化器：Adam, 学习率 = 1e-4&lt;/li&gt;
&lt;li&gt;序列长度：T = 5（即每个样本为连续5帧）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验结果&#34;&gt;实验结果&lt;/h2&gt;
&lt;p&gt;在测试集上，MSE 误差为 &lt;strong&gt;0.06&lt;/strong&gt;，对应角度误差约为 &lt;strong&gt;7°&lt;/strong&gt;。&lt;br&gt;
模型在直线段表现稳定，在连续转弯段有一定预测延迟&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;loss_curve&#34; loading=&#34;lazy&#34; src=&#34;/images/loss_curve.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;关键代码片段&#34;&gt;关键代码片段：&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ResNetLSTMModel&lt;/span&gt;(nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Module):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resnet &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resnet18(pretrained&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lstm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;LSTM(input_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;, hidden_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, batch_first&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Linear(&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;forward&lt;/span&gt;(self, x_seq):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        batch, seq_len, C, H, W &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x_seq&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        feats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resnet(x_seq[:, i]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(seq_len)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        feats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack(feats, dim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# [B, T, D]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        out, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lstm(feats)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fc(out[:, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模型选择与对比分析&#34;&gt;模型选择与对比分析&lt;/h2&gt;
&lt;p&gt;为什么选择 ResNet 而不是简单 CNN：&lt;/p&gt;</description>
    </item>
    <item>
      <title>强化学习环境之 Gymnasium</title>
      <link>/posts/what-is-gymnasium/</link>
      <pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/what-is-gymnasium/</guid>
      <description>&lt;p&gt;&lt;code&gt;Gymnasium&lt;/code&gt; 是 Python 中一个标准化的强化学习环境库（它是原始 &lt;code&gt;OpenAI Gym&lt;/code&gt; 的升级版）。它的作用是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把复杂问题（如机器人走路、自驾车避障）包装成统一的“游戏接口”，让强化学习模型可以跟它反复互动、学会做决策。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;换句话说，它是一个统一标准，让算法和环境能“说上话”。只要环境符合 Gymnasium 接口，你就能直接套用主流算法如 PPO、DDPG、DQN 去训练。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何安装-gymnasium&#34;&gt;如何安装 Gymnasium？&lt;/h2&gt;
&lt;p&gt;在终端输入以下命令安装（建议使用虚拟环境）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install gymnasium&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;all&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你只用基本环境，不包括 Atari、Box2D 等，可以简化为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install gymnasium
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;在代码中如何导入并使用&#34;&gt;在代码中如何导入并使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gymnasium &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; gym
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;make(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CartPole-v1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obs, info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;action_space&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sample()  &lt;span style=&#34;color:#75715e&#34;&gt;# 随机动作（一般训练中由模型决定）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    obs, reward, terminated, truncated, info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;step(action)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; terminated &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; truncated:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        obs, info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码展示了标准的强化学习交互流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化环境（&lt;code&gt;reset()&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;持续循环：选择动作 → 执行动作 → 接收反馈&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;环境的输入与输出env-接口结构&#34;&gt;环境的输入与输出：Env 接口结构&lt;/h2&gt;
&lt;h3 id=&#34;输入action&#34;&gt;输入：action&lt;/h3&gt;
&lt;p&gt;你给环境的输入是一个“动作”，比如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>路径规划（一）几何地图与占用地图在路径规划中的应用</title>
      <link>/posts/map-structure-explained/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/map-structure-explained/</guid>
      <description>解释 GeometricMap 与 OccupancyMap 的区别、各自作用及与 Quadtree 的衔接逻辑</description>
    </item>
    <item>
      <title>如何使用 C&#43;&#43; 编写一个 ROS 节点</title>
      <link>/posts/ros%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/ros%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/</guid>
      <description>&lt;p&gt;通过本案例可以掌握：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何使用 C++ 编写一个 ROS 设备驱动节点；&lt;/li&gt;
&lt;li&gt;如何调试 ROS 发布频率、时间戳和消息内容；&lt;/li&gt;
&lt;li&gt;如何结合 rosbag 与 rqt_plot 分析传感器数据的稳定性；&lt;/li&gt;
&lt;li&gt;为后续多传感器时间同步与融合（如 EKF）打下基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;多传感器融合中的-ros-驱动开发实战案例&#34;&gt;多传感器融合中的 ROS 驱动开发实战案例&lt;/h1&gt;
&lt;p&gt;在自动驾驶系统中，IMU、GNSS 和雷达等传感器是实现环境感知和车辆定位的关键。本文以 ROS 框架为基础，讲解如何编写一个简单的传感器驱动节点，实现数据采集 → 解析 → 发布 → 可视化，并附带常见调试命令。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-项目结构&#34;&gt;1. 项目结构&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_sensor_driver/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── launch/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── sensor_driver.launch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── src/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── imu_driver_node.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── include/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── imu_driver.hpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── config/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── imu_config.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── CMakeLists.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── package.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;my_sensor_driver： ROS package 根目录，所有内容都放在这里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;launch/sensor_driver.launch：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ROS 的启动脚本，用 XML 格式描述：
&lt;ul&gt;
&lt;li&gt;启动哪个节点（node）&lt;/li&gt;
&lt;li&gt;使用哪些参数文件（如 config/imu_config.yaml）&lt;/li&gt;
&lt;li&gt;是否输出日志到屏幕等&lt;/li&gt;
&lt;li&gt;用法：&lt;strong&gt;roslaunch my_sensor_driver sensor_driver.launch&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-launch&#34; data-lang=&#34;launch&#34;&gt;&amp;lt;launch&amp;gt;
&amp;lt;!-- 加载 IMU 参数配置 --&amp;gt;
&amp;lt;rosparam file=&amp;#34;$(find my_sensor_driver)/config/imu_config.yaml&amp;#34; command=&amp;#34;load&amp;#34;/&amp;gt;

&amp;lt;!-- 启动 IMU 驱动节点 --&amp;gt;
&amp;lt;node name=&amp;#34;imu_driver&amp;#34; pkg=&amp;#34;my_sensor_driver&amp;#34; type=&amp;#34;imu_driver_node&amp;#34; output=&amp;#34;screen&amp;#34;/&amp;gt;
&amp;lt;/launch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;src/imu_driver_node.cpp&lt;/p&gt;</description>
    </item>
    <item>
      <title>强化学习的状态空间和动作空间是什么</title>
      <link>/posts/state-action-space/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/state-action-space/</guid>
      <description>&lt;p&gt;在强化学习中，状态空间（Observation Space）和动作空间（Action Space）是两个基础概念。理解这两个空间，就等于弄清楚“模型看到了什么”和“模型可以做什么”。&lt;/p&gt;
&lt;p&gt;在本项目中，我们使用的是基于图像和传感器输入的强化学习模型，用于端到端的控制任务，如预测方向、速度或操作行为。下面我们从通用概念讲起，最后具体说明本项目的定义。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;状态空间observation-space&#34;&gt;状态空间（Observation Space）&lt;/h2&gt;
&lt;p&gt;状态空间描述了智能体每一步能从环境中获取到的“状态信息”。这些信息构成了模型的输入，可以是一个向量，也可以是图像、组合信号等。&lt;/p&gt;
&lt;h3 id=&#34;常见类型&#34;&gt;常见类型：&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;含义说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Box(4,)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;[-4.8, 4.8]&lt;/code&gt; × 4&lt;/td&gt;
          &lt;td&gt;连续变量向量，如位置、速度等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Box(84, 84, 3)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;图像输入&lt;/td&gt;
          &lt;td&gt;视觉输入，常用于端到端控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Dict(...)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;多通道输入&lt;/td&gt;
          &lt;td&gt;图像 + 雷达 + IMU 组合观测&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;本项目中的状态空间定义&#34;&gt;本项目中的状态空间定义：&lt;/h3&gt;
&lt;p&gt;在本项目中，我们的状态空间通常包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图像帧&lt;/strong&gt;：从机器人前置摄像头获取的 RGB 图像（如 &lt;code&gt;(224, 224, 3)&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;附加状态向量&lt;/strong&gt;（可选）：如上一帧速度、转角、航向角等传感器读数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;状态空间结构可能是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Box(low&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, high&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;, shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint8)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dict({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;: Box(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;speed&amp;#34;&lt;/span&gt;: Box(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yaw&amp;#34;&lt;/span&gt;: Box(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;动作空间action-space&#34;&gt;动作空间（Action Space）&lt;/h2&gt;
&lt;p&gt;动作空间描述了模型每一步可以采取的动作范围，也就是输出的结构。&lt;/p&gt;
&lt;h3 id=&#34;常见类型-1&#34;&gt;常见类型：&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;用途说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Discrete(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Discrete(3)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;离散控制，如左、右、直行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;Box(...)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Box(-1, 1, (2,), float32)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;连续动作，如转角和加速度控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;MultiBinary(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;MultiBinary(5)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;多位二进制开关组合&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;本项目中的动作空间定义&#34;&gt;本项目中的动作空间定义：&lt;/h3&gt;
&lt;p&gt;我们通常使用连续动作空间来控制机器人，例如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据结构与算法(自动驾驶应用方向)</title>
      <link>/posts/data_structure_and_algorithm/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/data_structure_and_algorithm/</guid>
      <description>&lt;h1 id=&#34;数据结构与算法自动驾驶应用方向&#34;&gt;数据结构与算法（自动驾驶应用方向）&lt;/h1&gt;
&lt;p&gt;在自动驾驶中，无论是路径规划、障碍物识别，还是实时控制，都离不开对&lt;strong&gt;数据的高效组织和计算方法的选择&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-常见数据结构及自动驾驶应用&#34;&gt;2. 常见数据结构（及自动驾驶应用）&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;数据结构&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;应用示例&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;数组 / 向量&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;连续存储，支持随机访问&lt;/td&gt;
          &lt;td&gt;储存历史轨迹点、车辆状态序列&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;链表 / 环形队列&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;灵活插入/删除&lt;/td&gt;
          &lt;td&gt;控制器中缓存最近速度或传感器数据&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;栈 / 队列&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;先进后出 / 先进先出&lt;/td&gt;
          &lt;td&gt;控制状态切换、命令排队处理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;哈希表（Hash Map）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;快速查找&lt;/td&gt;
          &lt;td&gt;建图中障碍物记录，传感器缓存索引&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;堆（Heap）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;优先级队列&lt;/td&gt;
          &lt;td&gt;A*/Dijkstra路径搜索中寻找最短路径&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;树 / 四叉树 / 八叉树&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;分层组织空间&lt;/td&gt;
          &lt;td&gt;空间分割（如QuadTree用于2D路径规划）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;图（Graph）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;节点+边&lt;/td&gt;
          &lt;td&gt;路径规划地图、任务依赖图等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-算法在自动驾驶中的典型应用&#34;&gt;3. 算法在自动驾驶中的典型应用&lt;/h2&gt;
&lt;h3 id=&#34;31-搜索与路径规划算法&#34;&gt;3.1 搜索与路径规划算法&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;算法&lt;/th&gt;
          &lt;th&gt;应用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;A*&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;地图中的最短路径搜索&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Dijkstra&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;全局路径规划&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;RRT/RRT*&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;采样路径规划，适用于复杂动态场景&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;32-数学优化类算法&#34;&gt;3.2 数学优化类算法&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;算法&lt;/th&gt;
          &lt;th&gt;应用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;MPC（Model Predictive Control）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;控制指令生成，预测未来行为&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;最小均方（LMS）/最小二乘（LS）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;滤波器设计，状态估计等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;33-搜索结构加速&#34;&gt;3.3 搜索结构加速&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;技术&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;KD-Tree&lt;/td&gt;
          &lt;td&gt;快速搜索最近邻（如点云比对）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Hashing&lt;/td&gt;
          &lt;td&gt;快速定位地图块、路段编号&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-4-示例a-路径规划伪代码&#34;&gt;🧪 4. 示例：A* 路径规划（伪代码）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A_star&lt;/span&gt;(start, goal, map):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    open_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PriorityQueue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    open_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(start)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; open_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; goal:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reconstruct_path()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; neighbor &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; get_neighbors(current):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; visited(neighbor):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculate_cost(current, neighbor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                open_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;put(neighbor, cost)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;-推荐学习资料&#34;&gt;📘 推荐学习资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《算法图解》：通俗易懂的入门书&lt;/li&gt;
&lt;li&gt;《数据结构与算法分析》：理论+实现&lt;/li&gt;
&lt;li&gt;LeetCode 专题：图、堆、树、搜索优化&lt;/li&gt;
&lt;li&gt;ROS Navigation Stack 源码分析&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>激光点云处理（Lidar Point Cloud Processing）</title>
      <link>/posts/lidar_point_cloud_processing/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>/posts/lidar_point_cloud_processing/</guid>
      <description>&lt;p&gt;激光雷达（Lidar）是自动驾驶中感知环境的核心传感器之一，它输出的是一帧帧&lt;strong&gt;点云数据（point cloud）&lt;/strong&gt;，表示空间中障碍物的位置和形状。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-什么是点云&#34;&gt;1. 什么是点云？&lt;/h2&gt;
&lt;p&gt;点云是由一系列点（x, y, z, intensity）组成的数据集，每个点表示空间中某个反射物的坐标和强度信息。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-点云数据结构&#34;&gt;2. 点云数据结构&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;字段&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;x, y, z&lt;/td&gt;
          &lt;td&gt;三维坐标&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;intensity&lt;/td&gt;
          &lt;td&gt;激光反射强度&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ring&lt;/td&gt;
          &lt;td&gt;激光束编号（多线雷达）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;timestamp&lt;/td&gt;
          &lt;td&gt;每个点的时间戳&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;reflectivity / ambient&lt;/td&gt;
          &lt;td&gt;可选，反映表面材质或亮度&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-常见处理流程&#34;&gt;3. 常见处理流程&lt;/h2&gt;
&lt;h3 id=&#34;31-点云预处理&#34;&gt;3.1 点云预处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;体素滤波（VoxelGrid）&lt;/strong&gt;：降低点云密度，加快处理速度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;裁剪（CropBox）&lt;/strong&gt;：去除远处或地面点，聚焦感兴趣区域&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间同步&lt;/strong&gt;：与IMU/GNSS同步，统一坐标系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-点云配准与融合&#34;&gt;3.2 点云配准与融合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ICP算法（Iterative Closest Point）&lt;/strong&gt;：配准不同帧点云，构建地图&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NDT算法&lt;/strong&gt;：用于鲁棒配准，适应点云局部稀疏问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多帧融合&lt;/strong&gt;：提升障碍检测的完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-点云感知&#34;&gt;3.3 点云感知&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地面分割（Ground Segmentation）&lt;/strong&gt;：识别并移除地面点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚类（Euclidean Clustering）&lt;/strong&gt;：提取独立目标（车辆、行人）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标跟踪与识别&lt;/strong&gt;：结合深度学习模型进行物体分类&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-使用工具与库&#34;&gt;4. 使用工具与库&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;工具/库&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;PCL (Point Cloud Library)&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;最主流的C++点云处理库&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Open3D&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Python友好，支持可视化与处理&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;ROS + sensor_msgs/PointCloud2&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ROS中点云标准消息格式&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;rviz&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;可视化点云、障碍物、车辆模型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Autoware/Apollo&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;提供全套点云感知模块&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-示例pcl聚类伪代码&#34;&gt;5. 示例：PCL聚类伪代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pcl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EuclideanClusterExtraction&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;pcl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PointXYZ&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ec;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ec.setClusterTolerance(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 50cm内为一类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ec.setMinClusterSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ec.setMaxClusterSize(&lt;span style=&#34;color:#ae81ff&#34;&gt;2500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ec.setSearchMethod(tree);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ec.setInputCloud(cloud_filtered);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ec.extract(cluster_indices);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;推荐学习资料&#34;&gt;推荐学习资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pointclouds.org/documentation/&#34;&gt;PCL官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open3d.org/docs/&#34;&gt;Open3D教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apollo / Autoware 点云处理模块源码分析&lt;/li&gt;
&lt;li&gt;Udacity Sensor Fusion Nanodegree&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/2025-05-15-rl-vs-fsm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/2025-05-15-rl-vs-fsm/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>/posts/acc-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/acc-strategy/</guid>
      <description>&lt;h1 id=&#34;acc自适应巡航控制策略设计与问题集&#34;&gt;ACC（自适应巡航控制）策略设计与问题集&lt;/h1&gt;
&lt;h2 id=&#34;一功能简介&#34;&gt;一、功能简介&lt;/h2&gt;
&lt;p&gt;ACC（Adaptive Cruise Control，自适应巡航控制）是一种纵向控制系统，在设定车速范围内，能根据前方车辆距离动态调整车速，实现跟车与巡航的自动化。&lt;/p&gt;
&lt;p&gt;应用场景涵盖高速公路、城市快速路等，需要与AEB（自动紧急制动）、LKA等模块进行协同。&lt;/p&gt;
&lt;h2 id=&#34;功能层级&#34;&gt;功能层级&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定速巡航模式（CC）&lt;/strong&gt;：当前无前车干扰，车辆自动维持设定巡航速度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持直道、弯道、上下坡；&lt;/li&gt;
&lt;li&gt;控制精度 +-1km/h(平路)， +-2km/h(坡道)&lt;/li&gt;
&lt;li&gt;允许巡航速度 0-150km/h;&lt;/li&gt;
&lt;li&gt;激活逻辑：初始速度小于30km/h 设为30，否则为当前车速&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自适应巡航模式（ACC）&lt;/strong&gt;：在设定车速范围内，系统基于前方目标车与自车的相对距离、相对速度信息，动态调整纵向加速度，保持安全车距。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持识别静态/动态目标车辆（主要使用前向毫米波雷达 + 视觉融合）&lt;/li&gt;
&lt;li&gt;根据设定时距（如 1.5s）和当前车速计算期望跟车距离&lt;/li&gt;
&lt;li&gt;动态调整加速度，保证相对时距误差收敛&lt;/li&gt;
&lt;li&gt;控制加速度/减速度不能超过设定限值（如 ±3 m/s²）&lt;/li&gt;
&lt;li&gt;系统状态平滑切换（Cruise → Follow → Brake → Resume）
核心输入信号：
V_ego : 自车速度
D_rel : 前车相对距离
V_rel : 前车相对速度
t_gap_set: 设定的时距
ACC_SetSpeed: 驾驶员设定的目标速度
TargetValid: 是否有有效目标车（用于状态判断）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出信号：
ACC_CmdAccel ：期望纵向加速度
ACC_State: 当前ACC子状态（Cruise, Follow, Brake等）
DriverDisplayInfo: 人机界面显示信息： ACC激活状态，目标速度，前车图标等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;停走模式（Stop &amp;amp; Go）&lt;/strong&gt;：低速或拥堵场景下支持自动减速直至完全停止，并在前车起步后自动跟随（部分车型支持）
1） 自车跟停后，开始计时，若跟停时间＜5min，前车起步，自车自动跟随起步；
2） 若跟停时间≥5min，则通过HMI告知驾驶员自车处于Hold状态，需要驾驶员的确认【踩油门踏板】，才能继续自动起步
3） 若0min≤跟停时间＜10min，收到驾驶员的确认【踩油门踏板】，车辆再次恢复到静止后，重新计时
4） 若跟停时间＞10min，ACC功能自动退出，拉起EPB
5） 前车起步，自车跟随起步的延迟不得大于2s【可标定】&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/adas-feature-roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/adas-feature-roadmap/</guid>
      <description>&lt;h2 id=&#34;一版本节奏管理的目的与核心价值&#34;&gt;一、版本节奏管理的目的与核心价值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt;：确保在 SOP（量产节点）/OTS（测试节点）前，核心功能稳定上线、策略迭代有序、用户体验持续提升；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;价值&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;支持跨模块协同（感知-规划-控制）；&lt;/li&gt;
&lt;li&gt;管理功能从“可用”到“好用”的演进；&lt;/li&gt;
&lt;li&gt;支撑量产目标达成，规避后期堆叠风险；&lt;/li&gt;
&lt;li&gt;聚焦子目标分批验证，降低系统集成风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二功能模块节奏规划机制&#34;&gt;二、功能模块节奏规划机制&lt;/h2&gt;
&lt;h3 id=&#34;1-版本节奏图的制定流程&#34;&gt;1. 版本节奏图的制定流程&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;步骤&lt;/th&gt;
          &lt;th&gt;内容&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;明确主功能目标（如 NOP、APA）及上线场景目标&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;拆解为 10~20 个子目标（可感知、可验证）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;评估各子目标所依赖模块（感知/定位/规划/控制/交互）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;与各模块 owner 共创投放节奏与资源计划&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;制定阶段性投放图，标注每个阶段策略迭代目标与接口稳定性要求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;工具绘图（Excel 甘特图、Jira Advanced Roadmap、Visio）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;周/月同步会议动态调整&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt=&#34;版本节奏图&#34; loading=&#34;lazy&#34; src=&#34;/images/output.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例图形： NOP版本迭代节奏图，描述每一版本功能合入&lt;br&gt;
横坐标代表迭代版本（Alpha → Final），纵坐标代表功能子目标，颜色代表完成状态或优先级（灰色：未开始，橙色：已规划，金色：开发中，绿色：已完成）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三子功能验证目标的梳理与拆分逻辑&#34;&gt;三、子功能验证目标的梳理与拆分逻辑&lt;/h2&gt;
&lt;h3 id=&#34;以-nopnavigate-on-pilot为例&#34;&gt;以 NOP（Navigate on Pilot）为例：&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;主功能&lt;/th&gt;
          &lt;th&gt;子功能示例&lt;/th&gt;
          &lt;th&gt;用户价值&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;高速自主巡航&lt;/td&gt;
          &lt;td&gt;保持车道行驶&lt;/td&gt;
          &lt;td&gt;提供舒适稳态巡航体验&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;变道触发判断&lt;/td&gt;
          &lt;td&gt;前车慢、旁车安全&lt;/td&gt;
          &lt;td&gt;提高效率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;自动变道执行&lt;/td&gt;
          &lt;td&gt;目标轨迹稳定，控制平顺&lt;/td&gt;
          &lt;td&gt;增强信任感&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;入口识别与汇入&lt;/td&gt;
          &lt;td&gt;场景识别准确，决策合理&lt;/td&gt;
          &lt;td&gt;完成复杂融合任务&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;出匝道与导航联动&lt;/td&gt;
          &lt;td&gt;与导航结构联动决策&lt;/td&gt;
          &lt;td&gt;实现端到端任务闭环&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;子功能编号&lt;/th&gt;
          &lt;th&gt;子功能目标&lt;/th&gt;
          &lt;th&gt;依赖模块&lt;/th&gt;
          &lt;th&gt;验证点&lt;/th&gt;
          &lt;th&gt;所属阶段&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-01&lt;/td&gt;
          &lt;td&gt;车道线保持LKA&lt;/td&gt;
          &lt;td&gt;感知 / 控制&lt;/td&gt;
          &lt;td&gt;横向偏差 &amp;lt; 0.3m，控制稳定无抖动&lt;/td&gt;
          &lt;td&gt;Alpha&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-02&lt;/td&gt;
          &lt;td&gt;前车跟随控制ACC&lt;/td&gt;
          &lt;td&gt;感知 / 控制&lt;/td&gt;
          &lt;td&gt;跟车时距控制在安全区间（1~2s）&lt;/td&gt;
          &lt;td&gt;Alpha&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-03&lt;/td&gt;
          &lt;td&gt;自动变道触发判断&lt;/td&gt;
          &lt;td&gt;感知 / 规划&lt;/td&gt;
          &lt;td&gt;正确识别变道意图与安全空隙&lt;/td&gt;
          &lt;td&gt;Beta&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-04&lt;/td&gt;
          &lt;td&gt;自动变道轨迹生成&lt;/td&gt;
          &lt;td&gt;规划 / 控制&lt;/td&gt;
          &lt;td&gt;轨迹无切换突变，控制平滑&lt;/td&gt;
          &lt;td&gt;Beta&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-05&lt;/td&gt;
          &lt;td&gt;变道后轨迹融合&lt;/td&gt;
          &lt;td&gt;控制&lt;/td&gt;
          &lt;td&gt;跟主车道轨迹融合自然，无震荡&lt;/td&gt;
          &lt;td&gt;Beta&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-06&lt;/td&gt;
          &lt;td&gt;出口识别&lt;/td&gt;
          &lt;td&gt;感知 / 定位&lt;/td&gt;
          &lt;td&gt;能提前100m以上识别正确匝道口&lt;/td&gt;
          &lt;td&gt;Beta&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-07&lt;/td&gt;
          &lt;td&gt;匝道汇入识别&lt;/td&gt;
          &lt;td&gt;感知 / 定位&lt;/td&gt;
          &lt;td&gt;能判断主路车流情况，择机切入&lt;/td&gt;
          &lt;td&gt;Gamma&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-08&lt;/td&gt;
          &lt;td&gt;与导航结构联动&lt;/td&gt;
          &lt;td&gt;交互 / 规划&lt;/td&gt;
          &lt;td&gt;能正确匹配导航路径并触发控制动作&lt;/td&gt;
          &lt;td&gt;Gamma&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-09&lt;/td&gt;
          &lt;td&gt;弯道曲率自适应&lt;/td&gt;
          &lt;td&gt;感知 / 控制&lt;/td&gt;
          &lt;td&gt;曲率大时减速及时，控制无甩尾&lt;/td&gt;
          &lt;td&gt;Gamma&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;NOP-10&lt;/td&gt;
          &lt;td&gt;用户手动变道提示策略&lt;/td&gt;
          &lt;td&gt;交互 / 规划&lt;/td&gt;
          &lt;td&gt;手动变道引导提示及时、易理解&lt;/td&gt;
          &lt;td&gt;Final&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;拆分原则&#34;&gt;拆分原则：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证点清晰&lt;/strong&gt;：每个子目标需能单独测试；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能依赖优先级&lt;/strong&gt;：有些功能 是其他功能的基础依赖，必须先上线&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖模块最小化&lt;/strong&gt;：优先推进感知、定位等前置模块；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略难度可控&lt;/strong&gt;：先上线“安全可用”，再迭代“体验更佳”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能依赖&#34;&gt;功能依赖：&lt;/h3&gt;
&lt;p&gt;比如车道保持LKA是所有横向控制的基础，ACC是所有纵向跟车策略的基础，同时功能成熟度高，测试覆盖充分，风险&amp;amp;联动复杂度小，因此在Alpha版本实现，优先投放；&lt;br&gt;
变道触发判断是所有变道策略的起点，先于规划于执行，并且只生成变道请求不直接控制，功能成熟度中等， 联动复杂度低，建议beta版本上线；&lt;br&gt;
出口检测是所有导航联动的前提，必须先于导航联动上线。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/build_llm_from_scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/build_llm_from_scratch/</guid>
      <description>&lt;h1 id=&#34;从-0-搭建一个-llm-全流程&#34;&gt;从 0 搭建一个 LLM 全流程&lt;/h1&gt;
&lt;h2 id=&#34;阶段划分&#34;&gt;阶段划分&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;阶段&lt;/th&gt;
          &lt;th&gt;目标&lt;/th&gt;
          &lt;th&gt;产出物&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1 数据准备&lt;/td&gt;
          &lt;td&gt;语料收集/清洗&lt;/td&gt;
          &lt;td&gt;预训练数据集&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2 模型架构设计&lt;/td&gt;
          &lt;td&gt;Transformer模型构建&lt;/td&gt;
          &lt;td&gt;初始模型结构&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3 预训练（PTM）&lt;/td&gt;
          &lt;td&gt;学会语言知识&lt;/td&gt;
          &lt;td&gt;基础大模型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4 SFT（指令微调）&lt;/td&gt;
          &lt;td&gt;学会理解和执行指令&lt;/td&gt;
          &lt;td&gt;SFT后模型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5 DPO / RLHF&lt;/td&gt;
          &lt;td&gt;优化为人喜欢的风格&lt;/td&gt;
          &lt;td&gt;对齐后的模型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6 部署优化&lt;/td&gt;
          &lt;td&gt;推理优化、上线&lt;/td&gt;
          &lt;td&gt;可用API/产品&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-数据准备&#34;&gt;1 数据准备&lt;/h2&gt;
&lt;h3 id=&#34;语料收集&#34;&gt;语料收集&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web data（CommonCrawl、Wikipedia、Books、Reddit、Arxiv、Github code 等）&lt;/li&gt;
&lt;li&gt;开源数据集（The Pile, C4, OSCAR, OpenWebText 等）&lt;/li&gt;
&lt;li&gt;自建爬虫抓取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清洗与处理&#34;&gt;清洗与处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去噪（去广告、去低质量段落）&lt;/li&gt;
&lt;li&gt;去重（SHA去重）&lt;/li&gt;
&lt;li&gt;分词（如 sentencepiece, BPE）&lt;/li&gt;
&lt;li&gt;数据格式转换（jsonl, tsv）&lt;/li&gt;
&lt;li&gt;长度过滤（过短/过长段落丢弃）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;产出物：Tokenized corpus，准备供模型训练。&lt;/p&gt;
&lt;h2 id=&#34;2-模型架构设计&#34;&gt;2 模型架构设计&lt;/h2&gt;
&lt;p&gt;核心：Transformer 解码器架构（GPT类模型）&lt;/p&gt;
&lt;h3 id=&#34;推荐开源实现&#34;&gt;推荐开源实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Huggingface Transformers&lt;/li&gt;
&lt;li&gt;nanoGPT&lt;/li&gt;
&lt;li&gt;Megatron-LM&lt;/li&gt;
&lt;li&gt;GPT-NeoX / GPT-J&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模型设计参数&#34;&gt;模型设计参数&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;参数&lt;/th&gt;
          &lt;th&gt;典型值（GPT-3 类模型）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;hidden_dim&lt;/td&gt;
          &lt;td&gt;12288&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;n_layers&lt;/td&gt;
          &lt;td&gt;96&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;n_heads&lt;/td&gt;
          &lt;td&gt;96&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;vocab_size&lt;/td&gt;
          &lt;td&gt;50k&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;max_position_embeddings&lt;/td&gt;
          &lt;td&gt;2048&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;activation&lt;/td&gt;
          &lt;td&gt;GELU&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果从小模型做起，1亿～3亿参数是初学者可训练范围。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/l2&#43;&#43;%E5%9C%BA%E6%99%AF%E8%90%BD%E5%9C%B0%E8%B7%AF%E5%BE%84%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/l2&#43;&#43;%E5%9C%BA%E6%99%AF%E8%90%BD%E5%9C%B0%E8%B7%AF%E5%BE%84%E7%A0%94%E7%A9%B6/</guid>
      <description>&lt;p&gt;本篇文档主要分析落地场景和相应的技术路径&lt;/p&gt;
&lt;h2 id=&#34;一l2典型落地场景总览&#34;&gt;一、L2++典型落地场景总览&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;场景类型&lt;/th&gt;
          &lt;th&gt;场景示例&lt;/th&gt;
          &lt;th&gt;是否主流落地&lt;/th&gt;
          &lt;th&gt;代表功能&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;高速场景&lt;/td&gt;
          &lt;td&gt;高速跟车、变道超车、上下匝道&lt;/td&gt;
          &lt;td&gt;已广泛部署&lt;/td&gt;
          &lt;td&gt;NOA、ACC、ALC&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;城市快速路&lt;/td&gt;
          &lt;td&gt;红绿灯通行、左转右转、避让行人非机动车&lt;/td&gt;
          &lt;td&gt;城市NOA核心区域&lt;/td&gt;
          &lt;td&gt;城市NOA、TJP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;泊车场景&lt;/td&gt;
          &lt;td&gt;车位搜索、自动泊入泊出、记忆泊车&lt;/td&gt;
          &lt;td&gt;商业化广泛&lt;/td&gt;
          &lt;td&gt;APA、RPA、VPA&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;通勤路径&lt;/td&gt;
          &lt;td&gt;自定义路线记忆、熟路线高阶自动驾驶&lt;/td&gt;
          &lt;td&gt;差异化亮点&lt;/td&gt;
          &lt;td&gt;通勤NOA、记忆行驶&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;高速/城市融合&lt;/td&gt;
          &lt;td&gt;点到点导航，全程自动辅助驾驶&lt;/td&gt;
          &lt;td&gt;探索中&lt;/td&gt;
          &lt;td&gt;全域NOA、PPA&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二典型场景落地路径分析&#34;&gt;二、典型场景落地路径分析&lt;/h2&gt;
&lt;h3 id=&#34;1-高速场景最成熟的l2落地入口&#34;&gt;1️ 高速场景：最成熟的L2++落地入口&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路径演进：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从ACC/LKA演进到NOA&lt;/li&gt;
&lt;li&gt;配合高精地图完成匝道上下、变道超车&lt;/li&gt;
&lt;li&gt;再演进为“无图NOA”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代表功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动变道超车（ALC）&lt;/li&gt;
&lt;li&gt;自动上下匝道&lt;/li&gt;
&lt;li&gt;智能限速&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代表落地品牌：&lt;/strong&gt;&lt;br&gt;
蔚来NOP+、华为ADS、Momenta Mpilot、理想NOA&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-城市道路场景能力挑战最大战略重点场景&#34;&gt;2️ 城市道路场景：能力挑战最大、战略重点场景&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路径演进：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从城市主干道直行 → 红绿灯识别通行&lt;/li&gt;
&lt;li&gt;→ 支持交叉路口通行、无保护左转、避让行人等&lt;/li&gt;
&lt;li&gt;→ BEV感知+轻地图+规则策略并存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代表功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;城市NOA&lt;/li&gt;
&lt;li&gt;红绿灯识别与响应&lt;/li&gt;
&lt;li&gt;异形障碍避让&lt;/li&gt;
&lt;li&gt;非保护转弯/礼让行人/加塞识别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代表落地品牌：&lt;/strong&gt;&lt;br&gt;
Momenta、华为ADS 2.0、百度Apollo Max、文远WePilot&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-泊车类场景感知主导场景落地稳定&#34;&gt;3️ 泊车类场景：感知主导场景、落地稳定&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;路径演进：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APA → RPA → 记忆泊车 → 云图泊车&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代表功能：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/lcc_alc_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/lcc_alc_strategy/</guid>
      <description>&lt;h1 id=&#34;lcc车道居中控制与-alc自动变道策略解析&#34;&gt;LCC（车道居中控制）与 ALC（自动变道）策略解析&lt;/h1&gt;
&lt;h2 id=&#34;一功能简介&#34;&gt;一、功能简介&lt;/h2&gt;
&lt;p&gt;LCC（Lane Centering Control）车道居中控制是 L2 自动驾驶的基础模块，目标是在双车道线清晰可见的情况下，让车辆持续保持在当前车道中线附近行驶，提升驾驶舒适性与安全性。&lt;/p&gt;
&lt;p&gt;ALC（Automatic Lane Change）则是在满足一定安全条件下，自动执行左右变道操作的模块。它通常建立在 LCC 的稳定控制之上，并与感知、HMI、策略等系统联动。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二功能层级与结构&#34;&gt;二、功能层级与结构&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模块&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;LCC 状态机管理&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;判断是否满足激活条件（双车道线清晰、速度范围、驾驶员授权）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;车道线提取与预测&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;基于前向摄像头识别左/右车道线，预测中线轨迹&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;横向控制器（如 PID / LQR）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;根据当前与目标车道中心偏差（Lateral Error）与航向误差调整方向盘角&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;ALC 触发策略管理&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;接收导航路径或驾驶员变道指令，判断是否触发变道行为&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;变道可行性判断模块&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;基于侧后感知结果判断变道是否安全&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;变道轨迹生成与跟踪&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;生成曲率平滑、jerk 限制的变道轨迹并跟踪执行&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三核心输入信号与感知要求&#34;&gt;三、核心输入信号与感知要求&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;信号&lt;/th&gt;
          &lt;th&gt;来源&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;左/右车道线位置&lt;/td&gt;
          &lt;td&gt;前向摄像头&lt;/td&gt;
          &lt;td&gt;用于车道中线拟合与目标轨迹生成&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;自车航向角与位置&lt;/td&gt;
          &lt;td&gt;IMU + 高精地图&lt;/td&gt;
          &lt;td&gt;用于航向误差与位置误差计算&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;周围车辆信息&lt;/td&gt;
          &lt;td&gt;摄像头 + 雷达融合&lt;/td&gt;
          &lt;td&gt;判断变道可行性，监测盲区目标&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;驾驶员授权状态&lt;/td&gt;
          &lt;td&gt;HMI、转向灯&lt;/td&gt;
          &lt;td&gt;判断是否允许变道或保持自动控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;路段可变道标签&lt;/td&gt;
          &lt;td&gt;高精地图&lt;/td&gt;
          &lt;td&gt;禁止变道区识别（如施工路段、实线）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四核心输出信号&#34;&gt;四、核心输出信号&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;信号&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;SteeringCmd&lt;/td&gt;
          &lt;td&gt;横向控制指令（方向盘角或期望曲率）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;LCC_State&lt;/td&gt;
          &lt;td&gt;当前车道保持状态（Active / Fault / Override）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ALC_Request&lt;/td&gt;
          &lt;td&gt;自动变道请求信号&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ALC_State&lt;/td&gt;
          &lt;td&gt;当前变道状态（准备中 / 执行中 / 成功 / 中断）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;五控制策略与流程&#34;&gt;五、控制策略与流程&lt;/h2&gt;
&lt;h3 id=&#34;lcc-控制流程简化&#34;&gt;LCC 控制流程（简化）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;识别左右车道线 → 中线拟合&lt;/li&gt;
&lt;li&gt;计算横向偏差、航向偏差&lt;/li&gt;
&lt;li&gt;使用 LQR/PID 控制器输出 SteeringCmd&lt;/li&gt;
&lt;li&gt;在偏差过大或车道线失效时退出控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;alc-控制流程&#34;&gt;ALC 控制流程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 接收导航或驾驶员变道指令
- 查询高精地图判断是否允许变道
- 检查目标车道是否存在车辆，计算相对距离/速度
- 满足安全条件后 → 下发变道轨迹 → 控制横向指令
- 变道完成后重新激活 LCC
- 若过程中存在异常（驾驶员接管、前方车辆切入等） → 中断变道
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;六典型问题与对策&#34;&gt;六、典型问题与对策&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;问题&lt;/th&gt;
          &lt;th&gt;原因&lt;/th&gt;
          &lt;th&gt;对策&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;车道保持“左右漂移”&lt;/td&gt;
          &lt;td&gt;中线预测不稳 / 控制参数未调优&lt;/td&gt;
          &lt;td&gt;优化车道线融合算法，提升控制器带宽&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;弯道控制不足&lt;/td&gt;
          &lt;td&gt;曲率模型过于简单&lt;/td&gt;
          &lt;td&gt;引入道路曲率预测 + 增加航向误差项&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;自动变道失败率高&lt;/td&gt;
          &lt;td&gt;感知误判侧后目标 or 控制不连贯&lt;/td&gt;
          &lt;td&gt;增强盲区感知 + 使用平滑轨迹生成器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;驾驶员频繁接管&lt;/td&gt;
          &lt;td&gt;控制反应滞后 or 不舒适&lt;/td&gt;
          &lt;td&gt;限制控制jerk，加快响应速度&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;七模块协同与扩展方向&#34;&gt;七、模块协同与扩展方向&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与 ACC 协同控制曲率+速度联动，保障跟车时的横向安全&lt;/li&gt;
&lt;li&gt;与 HMI 联动展示变道状态、提示变道意图确认&lt;/li&gt;
&lt;li&gt;城市场景扩展：支持红绿灯感知下的变道判断、实线/虚线车道语义识别&lt;/li&gt;
&lt;li&gt;与导航系统集成：基于路径执行自动变道至目标车道&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;八总结&#34;&gt;八、总结&lt;/h2&gt;
&lt;p&gt;LCC 与 ALC 是 NOP 领航辅助系统的重要基础模块。它们共同构成了 L2+ 系统的横向控制骨架，对控制器调校、感知策略准确性与地图标签一致性都提出了较高要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/lka_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/lka_strategy/</guid>
      <description>&lt;h1 id=&#34;1-功能概述function-overview&#34;&gt;1. 功能概述（Function Overview）&lt;/h1&gt;
&lt;p&gt;LKA（Lane Keeping Assist，车道保持辅助系统）是一项基于车道线识别与方向盘控制的主动安全技术，属于车辆横向控制功能的一部分。系统通过摄像头等感知设备识别车道线，并结合车辆当前的横向位置和偏移趋势，判断是否存在偏离风险。一旦检测到车辆即将偏离车道且驾驶员未主动干预，LKA系统将自动输出轻微的方向盘转角，辅助驾驶员将车辆引导回车道中央区域，从而提升行车安全性与稳定性。&lt;/p&gt;
&lt;h2 id=&#34;11-设计背景&#34;&gt;1.1 设计背景&lt;/h2&gt;
&lt;p&gt;随着高级驾驶辅助系统（ADAS）功能不断普及，驾驶安全性和驾驶员负荷降低已成为新一代乘用车系统设计的核心关注点。研究表明，车道偏离是高速和城市快速路行车事故的主要诱因之一，特别是在驾驶员注意力不集中、疲劳驾驶或短暂分心的情况下。LKA系统可作为传统LDW（车道偏离预警）的主动升级方案，在预警基础上提供方向干预控制，是实现L2级自动驾驶的重要组成模块。&lt;/p&gt;
&lt;h2 id=&#34;12-功能定位与边界&#34;&gt;1.2 功能定位与边界&lt;/h2&gt;
&lt;p&gt;LKA系统主要定位于 &lt;strong&gt;车道内的横向稳定辅助控制&lt;/strong&gt;，其功能边界如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目标工况&lt;/strong&gt;：高速公路、城市快速路等具有明确车道线标识的路段；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;速度范围&lt;/strong&gt;：通常适用于 20–70 km/h 区间；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作条件&lt;/strong&gt;：光照充足、车道线清晰、无打转向灯或刹车干预；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统行为&lt;/strong&gt;：在满足启用条件时自动激活；驾驶员主动控制方向时自动退出；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与LDW关系&lt;/strong&gt;：LKA为主动控制系统，需与LDW系统共享感知信息并进行协同工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;13-功能组成概览&#34;&gt;1.3 功能组成概览&lt;/h2&gt;
&lt;p&gt;LKA系统主要包括以下核心模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;感知输入模块&lt;/strong&gt;：负责车道线识别、车辆偏离量计算；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;横向偏离速度模块&lt;/strong&gt;：计算车辆在车道内的横向偏移趋势；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偏离预警逻辑模块&lt;/strong&gt;：判断车辆是否即将偏离车道；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;期望转角计算模块&lt;/strong&gt;：基于Ackermann模型计算方向盘目标转角；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使能控制模块&lt;/strong&gt;：判断LKA是否满足启用/退出条件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态管理与接口模块&lt;/strong&gt;：负责功能状态发布、HMI交互和转向控制信号输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统设计需保证干预柔和、控制精准，并支持驾驶员优先权逻辑，避免产生突兀控制或误触发行为。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;2-功能目标functional-goals&#34;&gt;2. 功能目标（Functional Goals）&lt;/h1&gt;
&lt;p&gt;LKA（Lane Keeping Assist，车道保持辅助系统）旨在在驾驶员未主动控制方向的情况下，协助车辆维持在当前车道内安全行驶，降低因注意力分散、疲劳驾驶或视线偏移而导致的车道偏离风险。LKA系统通过感知前方车道线、估算车辆偏离趋势，并适时输出方向盘转角指令，引导车辆回到车道中心。&lt;/p&gt;
&lt;h2 id=&#34;21-总体目标&#34;&gt;2.1 总体目标&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;目标编号&lt;/th&gt;
          &lt;th&gt;功能目标描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-1&lt;/td&gt;
          &lt;td&gt;实现对车道线的实时感知与偏离趋势预测&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-2&lt;/td&gt;
          &lt;td&gt;提供平稳、及时的方向盘转角控制，保持车辆居中行驶&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-3&lt;/td&gt;
          &lt;td&gt;避免在不合适场景（如打转向灯、车速过低）下误触发&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-4&lt;/td&gt;
          &lt;td&gt;支持驾驶员主动退出（踩刹车/打灯）与自动恢复机制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-5&lt;/td&gt;
          &lt;td&gt;与LDW（车道偏离预警）协同工作，提升整体车道安全策略&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FG-6&lt;/td&gt;
          &lt;td&gt;满足系统可用性与鲁棒性设计，支持信号丢失、暂时遮挡等容错情况&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;22-用户视角目标&#34;&gt;2.2 用户视角目标&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;用户需求编号&lt;/th&gt;
          &lt;th&gt;用户体验目标&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;UFG-1&lt;/td&gt;
          &lt;td&gt;驾驶过程中能感知LKA介入但不引起突兀干预&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UFG-2&lt;/td&gt;
          &lt;td&gt;在符合条件下，系统可自动维持车辆不偏离车道&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UFG-3&lt;/td&gt;
          &lt;td&gt;用户可在App或HMI中自由启停LKA功能&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UFG-4&lt;/td&gt;
          &lt;td&gt;系统退出后可自动恢复，不影响正常驾驶控制权&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UFG-5&lt;/td&gt;
          &lt;td&gt;车道线丢失/恶劣天气等情况下不会误输出干预动作&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;23-性能目标可量化&#34;&gt;2.3 性能目标（可量化）&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;性能目标编号&lt;/th&gt;
          &lt;th&gt;目标指标&lt;/th&gt;
          &lt;th&gt;备注&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;PG-1&lt;/td&gt;
          &lt;td&gt;LKA最大延迟时间 ≤ 100ms&lt;/td&gt;
          &lt;td&gt;感知 → 控制输出闭环延迟&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PG-2&lt;/td&gt;
          &lt;td&gt;控制横向误差 ≤ ±0.25m&lt;/td&gt;
          &lt;td&gt;保持在车道中心附近运行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PG-3&lt;/td&gt;
          &lt;td&gt;系统触发响应率 ≥ 95%&lt;/td&gt;
          &lt;td&gt;在满足ODD场景下的正常激活成功率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PG-4&lt;/td&gt;
          &lt;td&gt;误触发率 ≤ 1%&lt;/td&gt;
          &lt;td&gt;不应在无偏离趋势时误介入&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;3-odd运行设计场景operational-design-domain&#34;&gt;3. ODD运行设计场景（Operational Design Domain）&lt;/h1&gt;
&lt;p&gt;LKA系统的功能有效性依赖于其所运行的场景边界条件。ODD（Operational Design Domain）定义了LKA系统允许执行的&lt;em&gt;物理环境&lt;/em&gt;、&lt;em&gt;动态状态&lt;/em&gt;和&lt;em&gt;感知能力约束&lt;/em&gt;。系统&lt;em&gt;仅在满足ODD条件的场景下才允许激活和发挥作用&lt;/em&gt;，超出ODD范围将&lt;em&gt;自动退出LKA功能&lt;/em&gt;或&lt;em&gt;切换至LDW模式&lt;/em&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/apollo%E7%99%BE%E5%BA%A6%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%B9%B3%E5%8F%B0-1c16b41b2b178049b2e8da438a96b359/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/apollo%E7%99%BE%E5%BA%A6%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%B9%B3%E5%8F%B0-1c16b41b2b178049b2e8da438a96b359/</guid>
      <description>&lt;h1 id=&#34;apollo百度自动驾驶平台&#34;&gt;Apollo（百度自动驾驶平台）&lt;/h1&gt;
&lt;p&gt;优势: 拥有庞大的数据积累和强大的AI能力，开放平台生态丰富
典型客户: 与多家车企合作，如红旗、威马等
定位方向: 自动驾驶开放平台提供商
感知方案: 多传感器融合，强调高精地图与定位
成本区间: 中等，面向多种车型
技术路线 / 模型结构: 采用两段式端到端架构，感知和决策规划分为两段网络，通过隐式传递和联合训练实现端到端无人驾驶
潜在短板/难点: 系统复杂度高，对硬件算力要求高，前期投入大&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/bosch&#43;weride%E5%8D%9A%E4%B8%96&#43;%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C-1c16b41b2b17804e8438d2989a1de86e/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/bosch&#43;weride%E5%8D%9A%E4%B8%96&#43;%E6%96%87%E8%BF%9C%E7%9F%A5%E8%A1%8C-1c16b41b2b17804e8438d2989a1de86e/</guid>
      <description>&lt;h1 id=&#34;boschweride博世文远知行&#34;&gt;Bosch+WeRide（博世+文远知行）&lt;/h1&gt;
&lt;p&gt;优势: 博世在汽车零部件供应方面的优势与文远知行的自动驾驶技术相结合，具备量产能力和技术积累
典型客户: 未公开
定位方向: 自动驾驶技术提供商与Tier 1供应商合作模式
感知方案: 主要依赖摄像头、毫米波雷达，计划引入激光雷达以增强感知能力
成本区间: 中等，面向主流车型
技术路线 / 模型结构: 计划于2025年量产两段式端到端方案，后续过渡到一段式端到端方案
潜在短板/难点: 未公开&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/cruise-1c06b41b2b1780e38aeae2339059447a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/cruise-1c06b41b2b1780e38aeae2339059447a/</guid>
      <description>&lt;h1 id=&#34;cruise&#34;&gt;Cruise&lt;/h1&gt;
&lt;p&gt;优势: 背靠通用汽车，在车辆集成和量产部署上有优势
典型客户: Robotaxi
定位方向: Robotaxi自动驾驶方案供应商
感知方案: 多摄像头、雷达+激光雷达
技术路线 / 模型结构: 模块化堆栈；MLP和CNN结合的预测模型+强化学习微调
潜在短板/难点: 目前运营区域有限，且主要在温和天气条件下，突发情况或者较差天气下可能表现不稳定。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/huaweiinside%E5%8D%8E%E4%B8%BAhi%E6%A8%A1%E5%BC%8F-1c16b41b2b178030b1baf8e98729ea9f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/huaweiinside%E5%8D%8E%E4%B8%BAhi%E6%A8%A1%E5%BC%8F-1c16b41b2b178030b1baf8e98729ea9f/</guid>
      <description>&lt;h1 id=&#34;huaweiinside华为hi模式&#34;&gt;HUAWEIinside（华为Hi模式）&lt;/h1&gt;
&lt;p&gt;优势: 强大的技术研发能力，深厚的ICT背景，提供全栈智能驾驶解决方案
典型客户: 与多家车企合作，如北汽、长安、广汽等
定位方向: 华为与车企共同定义、联合开发；&lt;/p&gt;
&lt;p&gt;感知方案: 多传感器融合，包括摄像头、毫米波雷达和激光雷达
成本区间: 高，中高端车型为主
技术路线 / 模型结构: 采用两段式端到端架构，ADS 3.0中引入GOD大模型进行感知，PDP网络进行决策规划，并加入本能安全网络
潜在短板/难点: 系统复杂度高，对硬件算力要求高，前期投入大&lt;/p&gt;
&lt;p&gt;华为通过&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=240143038&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=GOD&amp;amp;zhida_source=entity&#34;&gt;GOD&lt;/a&gt; 和&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=240143038&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=RCR&amp;amp;zhida_source=entity&#34;&gt;RCR&lt;/a&gt; 两个关键算法实现了对物和路的实时感知。 GOD2.0 网络实现了高达&lt;strong&gt;99.9%的通用障碍物识别率&lt;/strong&gt;，其中包括白名单外异形物体和细致分类；RCR 2.0 通过道路拓扑推理实现了导航地图和实际场景的匹配，解决了没有高精度地图的关键问题。&lt;/p&gt;
&lt;p&gt;GOD网络(全称General Obstacle Detection，&lt;strong&gt;通用障碍物检测&lt;/strong&gt;)，实现障碍物精确识别。即使前方障碍物在BEV的白名单之外，在GOD网络的帮助下，智能驾驶系统依然可以识别和规避它，并充分利用了激光雷达的探测能力，轻松获取空间的信息。&lt;/p&gt;
&lt;p&gt;RCR 2.0网路，也就是道路&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=621955688&amp;amp;content_type=Answer&amp;amp;match_order=1&amp;amp;q=%E6%8B%93%E6%89%91%E6%8E%A8%E7%90%86&amp;amp;zhida_source=entity&#34;&gt;拓扑推理&lt;/a&gt;网络，也可以实现导航地图与现实世界的匹配，通过视觉算法技术，确定车辆行驶在车道内，并且根据人类使用的SD导航地图提供的路线信息以及路口视觉感知信息，RCR来推理路口车道之间的关系，从而实现&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=621955688&amp;amp;content_type=Answer&amp;amp;match_order=1&amp;amp;q=%E9%A2%86%E8%88%AA%E8%BE%85%E5%8A%A9&amp;amp;zhida_source=entity&#34;&gt;领航辅助&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/mobileye-1c06b41b2b178052ab04c501917f4153/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/mobileye-1c06b41b2b178052ab04c501917f4153/</guid>
      <description>&lt;h1 id=&#34;mobileye&#34;&gt;mobileye&lt;/h1&gt;
&lt;p&gt;优势: 在视觉感知特别是识别交通标志、车道线方面有深厚积累；
定位方向: 芯片+算法一体化
感知方案: “True Redundancy”，即双路径感知：一套纯视觉感知全栈，另一套独立的雷达+激光雷达感知全栈，最终在决策层融合
技术路线 / 模型结构: L2—&amp;gt;L4
形式化验证+RSS安全模型
潜在短板/难点: L4项目进展相对封闭缓慢；
作为供应商需要兼顾通用方案的适配性，性能上不如自研方案调优；在端到端进展相对保守&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/momenta-1c06b41b2b1780b7ba45c11193acd292/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/momenta-1c06b41b2b1780b7ba45c11193acd292/</guid>
      <description>&lt;h1 id=&#34;momenta&#34;&gt;Momenta&lt;/h1&gt;
&lt;p&gt;优势: 海量数据，量产交付经验；
算法领先、支持模块输出
典型客户: 上汽集团、通用汽车、奔驰、丰田、比亚迪
定位方向: 打造自动驾驶大脑，数据驱动算法迭代/高阶城市NOA 模块化交付
感知方案: 多传感器融合
成本区间: ¥1.5-2万
技术路线 / 模型结构: BEV + Transformer + OccNet
端到端大模型+数据驱动
MSD（Momenta self driving）支持L2++到L4
Mpilot实现L2/L2+驾驶辅助功能
潜在短板/难点: 方案价不低，难下放到中低端车型&lt;/p&gt;
&lt;p&gt;在高阶智驾的NOA的竞争中，据统计，Momenta已经获得了市场六成占有率的结果。&lt;/p&gt;
&lt;p&gt;Momenta的战略是通过“数据驱动的飞轮”以及“两条腿”打造自动驾驶的大脑，实现数据闭环的算法迭代。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png&#34; loading=&#34;lazy&#34; src=&#34;21281fa9-3cb6-462e-ad8c-83d80ccfc280.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据飞轮指的是海量数据形成驱动，随着量产数据、数据驱动的算法以及两者闭环自动化的不断积累和迭代，&lt;em&gt;飞轮&lt;/em&gt;将越转越快，终成厚积薄发之势，带来产品和商业的爆发增长，最终实现无人&lt;em&gt;驾驶&lt;/em&gt;规模化落地&lt;/p&gt;
&lt;p&gt;一条腿是Mpilot量产自动驾驶方案，另外一条腿是MSD——完全无人的驾驶方案，整个算法是按照MSD的标准和要求设计的，之后再应用于量产&lt;/p&gt;
&lt;p&gt;第三个点是通过端到端大模型完成海量数据的低成本训练。&lt;/p&gt;
&lt;p&gt;一般基于高精地图的智能驾驶方案，车辆行驶主要是依赖高精地图给的精度为±20厘米的车道参考线行驶，但没有无图方案下，就需要车辆自己能够确保在车道内行驶，所以需要车辆本身能够识别车道以及行驶的约束。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感知模块：BEV+Transformer算法构架，辅以DDLD车道线识别算法。主要依赖其DDLD-Data Driven Landmark Detection 车道线识别算法来感知运动的边界。通过识别车道线以及道路标识构建车辆实时行驶地图，来告诉车辆行驶约束，但车辆是运动的，车辆的实时运动需要与实时行驶地图匹配和定位。Momenta通过采集车辆运动执行器以及姿态的传感器轮速传感器，转向角，IMU，电机转速等信息融合算法来实现车辆在实时地图中定位。&lt;/li&gt;
&lt;li&gt;定位模块：采用&lt;a href=&#34;https://zhida.zhihu.com/search?content_id=240143038&amp;amp;content_type=Article&amp;amp;match_order=1&amp;amp;q=DDPF&amp;amp;zhida_source=entity&#34;&gt;DDPF&lt;/a&gt; 算法&lt;/li&gt;
&lt;li&gt;规划算法：引入DLP 算法。Momenta 的规划算法核心逻辑经历了从Rule-based/Optimization-based的方法到深度学习驱动的规划（Deep Learning-based Planning）的演进。在&lt;strong&gt;2020&lt;/strong&gt;年已经开始探索将&lt;strong&gt;深度学习方法引入规划模块&lt;/strong&gt;，到2023年上半年实现量产上车，时间点上比特斯拉用深度学习驱动planning甚至更早一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在planning的部分，逐渐用深度学习去替代传统的基于规则的、基于优化的planning已经形成趋势&lt;/p&gt;
&lt;p&gt;端到端大模型&lt;/p&gt;
&lt;p&gt;在最新 的&lt;strong&gt;Momenta 智驾大模型 - AD 算法 5.0&lt;/strong&gt;中**，&lt;strong&gt;已经将&lt;/strong&gt;感知和规划**整合进一个大模型中，模仿人类的长期记忆。同时保留DLP模型，类似短期记忆，能快速学习。以此保证高质量的大模型训练数据+低成本的训练方法。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image.png&#34; loading=&#34;lazy&#34; src=&#34;image%201.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;和特斯拉类似但是有不同之处的地方是：momenta的端到端分了两个支路。一个支路是端到端的大模型，类比于人类的长期记忆。另外一个支路类似于“短期记忆”，“短期记忆”由感知（DDLD）和规划（DDOD），以及记忆与深度学习的规划（DLP）构成，通过这样的方式，可以先进行快速训练，验证用于训练的数据是否正确，以及训练使用的算法是否有效。&lt;strong&gt;最终，被“短期记忆”验证过的好的算法和数据会在一段时间的积累后应用在“长期记忆”，即最终的端到端大模型上，这样可以保证一次就能把大模型训练好。其通过使用“长期记忆”和“短期记忆”配合的方式，能够让智驾大模型的训练成本缩小10到100倍。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MSD（Momenta Self-Driving）架构&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BEV+Transformer&lt;/strong&gt;：通过视觉BEVFormer生成鸟瞰图特征&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时序融合&lt;/strong&gt;：利用3D Memory Bank存储历史帧信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多任务学习&lt;/strong&gt;：联合优化检测、分割、预测任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mpilot：侧重于量产自动驾驶技术的快速推广&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据闭环的意义：&lt;/p&gt;
&lt;h3 id=&#34;11-搜集-corner-case-的数据&#34;&gt;&lt;strong&gt;1.1 搜集 corner case 的数据&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;只要是 L2 及 L2 以上的产品，都需要具备持续进化的能力。要让自动驾驶系统持续地进化，就需要不断获得 corner case 的数据。而随着越来越多的 corner case 从 「未知」 转换成 「已知」，通过数量有限、形式路线也有限的测试车辆挖掘出新的 corner case 的难度越来越大。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/waymo-1c06b41b2b17800f94b0cbb3b50246fc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/waymo-1c06b41b2b17800f94b0cbb3b50246fc/</guid>
      <description>&lt;h1 id=&#34;waymo&#34;&gt;Waymo&lt;/h1&gt;
&lt;p&gt;优势: 高精地图和多冗余传感器，有地图的城市地区表现稳健
定位方向: L4，多传感器+激光雷达
感知方案: 多摄像头、雷达+激光雷达
技术路线 / 模型结构: 重传感器+高精地图；
多目标跟踪+意图预测；
模块化分层决策
潜在短板/难点: 过于依赖高精地图导致泛化能力受限；
Waymo的传感器和计算成本高昂&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E4%B8%BB%E7%BA%BF%E7%A7%91%E6%8A%80-1c16b41b2b1780049f10fd2531f511a9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E4%B8%BB%E7%BA%BF%E7%A7%91%E6%8A%80-1c16b41b2b1780049f10fd2531f511a9/</guid>
      <description>&lt;h1 id=&#34;主线科技&#34;&gt;主线科技&lt;/h1&gt;
&lt;p&gt;定位方向: 封闭园区
商用车/卡车&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E5%9B%BE%E6%A3%AE%E6%9C%AA%E6%9D%A5-1c16b41b2b1780a3be7bc526b4328c7f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E5%9B%BE%E6%A3%AE%E6%9C%AA%E6%9D%A5-1c16b41b2b1780a3be7bc526b4328c7f/</guid>
      <description>&lt;h1 id=&#34;图森未来&#34;&gt;图森未来&lt;/h1&gt;
&lt;p&gt;定位方向: 封闭园区
商用车/卡车&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E5%9C%B0%E5%B9%B3%E7%BA%BF-1c06b41b2b1780b5a581f230b90ca7b4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E5%9C%B0%E5%B9%B3%E7%BA%BF-1c06b41b2b1780b5a581f230b90ca7b4/</guid>
      <description>&lt;h1 id=&#34;地平线&#34;&gt;地平线&lt;/h1&gt;
&lt;p&gt;优势: 性价比高、低功耗、交付灵活
典型客户: 理想、广汽、奇瑞
定位方向: 芯片+算法一体平台/BPU架构
感知方案: 视觉优先+低成本雷达
成本区间: ¥0.8-1.2万
技术路线 / 模型结构: 高效卷积网络 + 轻量BEV
L2+量产
潜在短板/难点: 算法通用性不如Momenta；芯片性能不及Orion&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传感器配置&lt;/strong&gt;：8MP摄像头×5 + 3R（4D成像雷达）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心算法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;BPU® Nash架构优化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;量化感知训练&lt;/strong&gt;：INT8精度下检测精度损失＜1%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异构计算&lt;/strong&gt;：任务级分配到BPU/CPU（时延降低30%）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;感知模型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Proprietary CNN&lt;/strong&gt;：针对征程5芯片优化的轻量网络&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多任务头设计&lt;/strong&gt;：检测、车道线、可行驶区域联合输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E6%AF%AB%E6%9C%AB%E6%99%BA%E8%A1%8C-1c06b41b2b17803bb483c438e3b43b4b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E6%AF%AB%E6%9C%AB%E6%99%BA%E8%A1%8C-1c06b41b2b17803bb483c438e3b43b4b/</guid>
      <description>&lt;h1 id=&#34;毫末智行&#34;&gt;毫末智行&lt;/h1&gt;
&lt;p&gt;优势: 数据驱动+闭环，大模型
典型客户: 魏牌、沙龙等
定位方向: 注重量产和成本控制、自建数据闭环
感知方案: 视觉和毫米波雷达融合，适合L2+/L3级应用
技术路线 / 模型结构: MANA大模型 + OccGrid + BEV
潜在短板/难点: 商业拓展范围局限在长城生态；
NOA落地慢于华为小鹏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;量产导向&lt;/strong&gt;：支持L2+级辅助驾驶&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传感器配置&lt;/strong&gt;：1MP摄像头×3 + 5R（传统毫米波）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心算法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MANA雪湖数据体系&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;低成本数据引擎（千元级车端计算单元）&lt;/li&gt;
&lt;li&gt;自动触发机制：仅上传0.01%关键场景数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轻量化模型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MobileNetV3+BiFPN&lt;/strong&gt;：模型大小＜8MB&lt;/li&gt;
&lt;li&gt;知识蒸馏：从大模型迁移至车端小模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E6%B5%B7%E9%B8%A5%E7%A7%91%E6%8A%80-1c06b41b2b1780568e95c169f46edee7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E6%B5%B7%E9%B8%A5%E7%A7%91%E6%8A%80-1c06b41b2b1780568e95c169f46edee7/</guid>
      <description>&lt;h1 id=&#34;海鸥科技&#34;&gt;海鸥科技&lt;/h1&gt;
&lt;p&gt;优势: 快速部署、适配多车型
典型客户: 合众、广汽等
定位方向: BEV跟进快；
轻量型NOA解决方案提供商/专注特定场景
感知方案: 摄像头 + 雷达
技术路线 / 模型结构: BEV + Transformer
潜在短板/难点: 自研时间较短，长尾能力待验证&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专注场景&lt;/strong&gt;：港口/矿区低速封闭场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传感器配置&lt;/strong&gt;：2MP广角摄像头×4 + 低成本LiDAR×2（16线）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心算法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;动态背景建模&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;针对固定场景的移动目标检测（如AGV、集装箱）&lt;/li&gt;
&lt;li&gt;背景差分法+光流法融合，误检率＜0.1次/小时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抗粉尘干扰&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;毫米波雷达点云密度补偿算法&lt;/li&gt;
&lt;li&gt;视觉去雾模型（AOD-Net）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E6%B7%B1%E5%9C%B3%E5%85%83%E6%88%8E%E5%90%AF%E8%A1%8C-1c16b41b2b1780079604c0e777965807/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E6%B7%B1%E5%9C%B3%E5%85%83%E6%88%8E%E5%90%AF%E8%A1%8C-1c16b41b2b1780079604c0e777965807/</guid>
      <description>&lt;h1 id=&#34;深圳元戎启行&#34;&gt;深圳元戎启行&lt;/h1&gt;
&lt;p&gt;优势: 在城市复杂场景中表现出色，技术路线适应性强
典型客户: 与多家车企合作，如长城汽车等
定位方向: 高阶智驾，无图NOA
感知方案: 多传感器融合，侧重于实时感知与决策
成本区间: 中等，面向多种车型
技术路线 / 模型结构: 基于“无图”端到端模型，强调在无高精地图的情况下实现自动驾驶
潜在短板/难点: 无高精地图方案在某些场景下可能面临挑战，需要大量数据和训练以确保可靠性&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E7%BA%B5%E7%9B%AE%E7%A7%91%E6%8A%80-1c06b41b2b1780a9b340d68448d9f0f2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E7%BA%B5%E7%9B%AE%E7%A7%91%E6%8A%80-1c06b41b2b1780a9b340d68448d9f0f2/</guid>
      <description>&lt;h1 id=&#34;纵目科技&#34;&gt;纵目科技&lt;/h1&gt;
&lt;p&gt;优势: 成本控制好、量产交付经验丰富
典型客户: 日产、本田（合资系）
定位方向: 专注于自动泊车/传统ADAS / Tier1替代者
感知方案: 多摄像头 + 通用雷达
成本区间: ¥0.3-0.5万
技术路线 / 模型结构: 摄像头视觉模型 + 规则融合
潜在短板/难点: 算法深度/大模型研发相对滞后&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;专注领域&lt;/strong&gt;：自动泊车（APA/AVP）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传感器配置&lt;/strong&gt;：环视摄像头×4 + 超声波雷达×12&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心算法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;车位识别&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;视觉几何约束检测（车位线夹角/长度分析）&lt;/li&gt;
&lt;li&gt;超声波点聚类（DBSCAN算法优化版）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SLAM定位&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;视觉里程计+V-SLAM，定位误差＜5cm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抗干扰策略&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;雨水反光抑制（偏振滤光+图像修复）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%9A%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-1c06b41b2b1780f59ef7e2b98f6d4f5b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E8%A1%8C%E4%B8%9A%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90-1c06b41b2b1780f59ef7e2b98f6d4f5b/</guid>
      <description>&lt;h1 id=&#34;1研究目的&#34;&gt;1.研究目的&lt;/h1&gt;
&lt;p&gt;本篇报告主要围绕这几个问题展开:&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;&lt;a href=&#34;#1%E8%83%8C%E6%99%AF%E4%B8%8E%E7%A0%94%E7%A9%B6%E5%8A%A8%E6%9C%BA&#34;&gt;背景与研究动机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2%E8%87%AA%E9%A9%BE%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91%E4%B8%BB%E6%94%BB%E7%9B%AE%E6%A0%87&#34;&gt;自驾技术发展方向/主攻目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94&#34;&gt;自动驾驶方案提供商的技术方案对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4%E5%B8%82%E5%9C%BA%E5%A4%A7%E5%B0%8F%E5%92%8C%E6%BD%9C%E5%9C%A8%E7%9A%84%E5%B8%82%E5%9C%BA&#34;&gt;市场大小和未被开发的市场&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5%E6%8A%80%E6%9C%AF%E6%8C%91%E6%88%98%E5%92%8C%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF&#34;&gt;技术趋势和突破点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（部分信息可能覆盖不全，主要在于部分公司信息不够公开，需要进一步调研或者查看行业报告或第三方分析）&lt;/p&gt;
&lt;h1 id=&#34;1-背景与研究动机&#34;&gt;1. 背景与研究动机&lt;/h1&gt;
&lt;p&gt;行业趋势:
地图: 对于高精度地图的鲜度依赖过高,导致城市路段的辅助驾驶进度难以继续,出于安全冗余的考虑，目前业内更认可的作法是“重感知、轻地图”的路线。
小鹏汽车和智己汽车（合作方为Momenta），目前都已经从研发端切换到“重感知”的路线上，并且试图摆脱对高精地图的依赖。
但如果没有高精地图，车辆行驶到路口时，系统需要依靠感知和计算作出正确判断。目前，毫末是通过迁移学习领域中的混合迁移训练方法，将仿真数据和真实数据进行混合训练，从而提高红绿灯识别度。此外，还通过用Transformer做时间和空间上的前融合方式，解决“空间感知碎片化”和“时间感知不连续”的问题，有效识别城市道路车道线。&lt;/p&gt;
&lt;h1 id=&#34;2自驾技术发展方向主攻目标&#34;&gt;2.自驾技术发展方向、主攻目标&lt;/h1&gt;
&lt;h2 id=&#34;21城市无图noa导航辅助驾驶&#34;&gt;2.1城市无图NOA（导航辅助驾驶）&lt;/h2&gt;
&lt;p&gt;随着智能驾驶技术的不断突破和消费者需求的日益升级，从L2等级到更高级的L2++自动驾驶辅助系统正逐步扩展至各类车型。&lt;/p&gt;
&lt;p&gt;无图NOA 是“感知驱动的决策规划系统”，感知是输入，决策规划是核心，本质是完整的智能驾驶决策架构，它的核心目标是：&lt;strong&gt;在没有高精地图的情况下，仅凭车辆自身感知，实时理解环境并做出安全、合理的驾驶决策。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高速和城市NOA（导航辅助驾驶），以及APA（自动泊车）等功能的渗透率不断提升,城市NOA已成为高阶智能驾驶技术的重要发展方向，而第三方智驾供应商在其中扮演着至关重要的角色。&lt;/p&gt;
&lt;p&gt;Momenta、HUAWEIinside（华为Hi模式）、Bosch+WeRide（博世+文远知行）、Apollo（百度自动驾驶平台）和深圳元戎启行科技有限公司这五家供应商是无图NOA方案战场中的主要玩家。&lt;/p&gt;
&lt;h3 id=&#34;22无图化noa实现方式&#34;&gt;2.2无图化NOA实现方式&lt;/h3&gt;
&lt;p&gt;无图方案不是完全摒弃高精地图，下游轨迹预测/规控仍然依赖&lt;strong&gt;高精地图&lt;/strong&gt;的输入。『无图』实际指的是不再依赖厂商提供的高精地图，转而使用车载算法实时感知的『局部在线高精地图』。&lt;/p&gt;
&lt;p&gt;因此无图方案的核心在于&lt;strong&gt;实时在线地图&lt;/strong&gt;构建的准确性，从技术层面来讲，正常情况下无图的上限就是有图；而在传统高精地图更新不及时的区域（比如施工路段、道路重构路段等），无图方案是更有优势的。在线高精地图的发展也有两年多了，无图一直致力于从『能用』走向『好用』。&lt;/p&gt;
&lt;p&gt;底图绘制设备：包含摄像头、高精度GPS、高精度IMU，及用于深度学习和SLAM的计算芯片，并对搭载的传感器设置高精度的时间同步，整套设备价格在1000美金左右。Momenta不会对产品进行单独的售卖，而选择和主机厂、出租车队、物流车队等合作，或将传感器设备搭载在自有测试车队上完成底图绘制；&lt;/p&gt;
&lt;p&gt;地图更新设备：地图更新设备的成本相较底图绘制设备，要低很多。Momenta将更新设备分为后装和前装两种方式进行部署。后装方式，即将众包更新方案搭载在Momenta后装产品设备“途铃”，完成地图更新。前装方式是Momenta将通过与主机厂合作共同研发“定位盒子”，并搭载Momenta地图更新方案。&lt;/p&gt;
&lt;p&gt;相关工作
Driving with Prior Maps: Unified Vector Prior Encoding for Autonomous Vehicle Mapping&lt;/p&gt;
&lt;p&gt;论文链接：https://arxiv.org/abs/2409.05352v1&lt;/p&gt;
&lt;p&gt;阿里巴巴和西交团队的工作：高精地图（HD地图）对于自动驾驶汽车的精确导航和决策至关重要，但其创建和维护带来了巨大的成本和及时性挑战。使用车载传感器在线构建高精地图已成为一种有前景的解决方案；然而，由于遮挡和恶劣天气，这些方法可能会受到不完整数据的阻碍。本文提出了PriorDrive框架，通过利用先验地图的力量来解决这些局限性，显著提高了在线高精地图构建的鲁棒性和准确性。我们的方法整合了各种先前的地图，如OpenStreetMap的标准定义地图（SD地图）、供应商过时的高精地图以及来自历史车辆数据的本地构建地图。为了将这些先验信息有效地编码到在线见图模型中，PriorDrive提出了一种混合先验表示（HPQuery），该表示对不同地图元素的表示进行了标准化。PriorDrive的核心是统一矢量编码器（UVE），它采用双编码机制来处理矢量数据。矢量内编码器捕获细粒度的局部特征，而矢量间编码器集成全局上下文。此外提出了一种segment-level和point-level的预训练策略，使UVE能够学习矢量数据的先验分布，从而提高编码器的泛化能力和性能。通过对nuScenes数据集的广泛测试，PriorDrive与各种在线地图模型高度兼容，并大大提高了地图预测能力。通过PriorDrive框架整合先前的地图，为单一感知数据的挑战提供了一个强大的解决方案，为更可靠的自动驾驶汽车导航铺平了道路。&lt;/p&gt;
&lt;p&gt;Neural HD Map Generation from Multiple Vectorized Tiles Locally Produced by Autonomous Vehicles&lt;/p&gt;
&lt;p&gt;论文链接：https://arxiv.org/abs/2409.03445v1&lt;/p&gt;
&lt;p&gt;高精地图厂商四维图新的工作：高精地图是自动驾驶系统的基本组成部分，因为它可以提供有关驾驶场景的精确环境信息。最近关于矢量化地图生成的工作，车辆运行一次只能在自车周围生成65%的局部地图元素，这就留下了一个难题，即如何在高质量标准下构建投影在世界坐标系中的全局高精地图。为了解决这个问题，我们将GNMap作为一个端到端的生成神经网络来自动构建具有多个矢量化图块的高精地图，这些图块是由自动驾驶汽车通过多次旅行在本地生成的。它利用多层和基于注意力的自动编码器作为共享网络，其中的参数是从两个不同的任务（即分别进行预训练和微调）中学习的，以确保生成的映射的完整性和元素类别的正确性。对真实世界的数据集进行了大量的定性评估，实验结果表明，GNMap可以超过SOTA方法5%以上的F1分数，只需少量手动修改即可达到工业使用水平。我们已经在有限公司Navinfo公司部署了它，作为自动构建自动驾驶系统高精地图的不可或缺的软件。&lt;/p&gt;
&lt;p&gt;Enhancing Vectorized Map Perception with Historical Rasterized Maps（ECCV2024）&lt;/p&gt;
&lt;p&gt;论文链接：https://arxiv.org/abs/2409.00620v1&lt;/p&gt;
&lt;p&gt;开源链接：https://github.com/HXMap/HRMapNet&lt;/p&gt;
&lt;p&gt;无图NOA以来，研究人员focus在端到端的在线矢量地图构建上，该技术在鸟瞰图（BEV）空间中实现，希望能够替代传统成本较高的离线高精（HD）地图。但是当前方法在恶劣环境下的准确性和鲁棒性很容易受限。为此本文提出了HRMapNet，其利用低成本的历史光栅化地图来增强在线矢量化地图的感知能力。历史光栅化地图来源于先前预测的结果，因此可以提供当前帧一定的先验信息。为了充分利用历史地图，作者设计了两个模块来增强BEV特征和地图元素的查询。对于BEV特征，本文设计了特征聚合模块，以编码图像和历史地图的特征。对于地图元素的查询，则设计了一个查询初始化模块，以赋予查询从历史地图中得到的先验信息。这两个模块对于在在线感知中利用地图信息至关重要。HRMapNet能够与大多数现有的在线矢量化地图感知方法集成。问鼎nuScenes和Argoverse 2 SOTA。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/noa/%E8%BD%BB%E8%88%9F%E6%99%BA%E8%88%AA-1c06b41b2b178013bc1ff8d04d7b368f/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/noa/%E8%BD%BB%E8%88%9F%E6%99%BA%E8%88%AA-1c06b41b2b178013bc1ff8d04d7b368f/</guid>
      <description>&lt;h1 id=&#34;轻舟智航&#34;&gt;轻舟智航&lt;/h1&gt;
&lt;p&gt;优势: 城市复杂工况经验丰富
典型客户: 城市级Robotaxi项目
定位方向: L4城市道路自动驾驶 / Robotaxi
感知方案: 激光+视觉强融合
成本区间: ¥8-12万
技术路线 / 模型结构: 预测+规划+激光雷达BEV模型
潜在短板/难点: 量产模型落地路径还不清晰&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术方案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;城市道路聚焦&lt;/strong&gt;：支持复杂城区场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传感器配置&lt;/strong&gt;：128线LiDAR×2 + 8MP摄像头×6 + 4D雷达×3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心算法&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;OmniNet全场景感知&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;多模态BEV特征融合（LiDAR点云+视觉+雷达）&lt;/li&gt;
&lt;li&gt;动态目标4D属性预测（位置+速度+加速度+意图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仿真增强&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;数字孪生引擎生成百万级corner case&lt;/li&gt;
&lt;li&gt;对抗训练提升模型鲁棒性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/nop_strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/nop_strategy/</guid>
      <description>&lt;h1 id=&#34;nopnavigate-on-pilot功能逻辑与子功能模块解析&#34;&gt;NOP（Navigate on Pilot）功能逻辑与子功能模块解析&lt;/h1&gt;
&lt;h2 id=&#34;一功能简介&#34;&gt;一、功能简介&lt;/h2&gt;
&lt;p&gt;NOP（Navigate on Pilot，领航辅助驾驶）是典型的 L2+ 自动驾驶融合功能，依托导航系统、高精地图、感知系统与底层控制系统的深度集成，可在高精地图覆盖的高速及城市高架路段中，按导航路径执行一系列驾驶操作，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动汇入主路；&lt;/li&gt;
&lt;li&gt;在主路中巡航行驶，并智能选择最优车道；&lt;/li&gt;
&lt;li&gt;根据导航规划自动切换至下一个高速/高架；&lt;/li&gt;
&lt;li&gt;自动驶离主路进入目标匝道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此过程中，NOP 将实时感知限速、前车、障碍物与道路结构信息，并与 ACC、LCC、ALC 等模块协同控制，动态调节纵横向控制输出。&lt;/p&gt;
&lt;p&gt;🚫 NOP 不适用于非结构化道路（如城区支路、乡村道路、无高精地图区域），系统会主动退出或提示驾驶员接管。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二功能层级与子模块&#34;&gt;二、功能层级与子模块&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;功能模块&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;路径规划（Path Planning）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;从导航系统获取路径约束，结合车道线信息进行车道级轨迹规划&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;车道保持（LCC）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;在当前车道保持居中行驶，适配路径规划要求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;自适应巡航（ACC）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;保持与前车安全距离，实现纵向控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;自动变道（ALC）&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;判断安全条件并在策略允许时执行变道&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;HMI交互模块&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;驾驶员授权、变道意图确认、功能状态显示&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;策略管理与状态机&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;统一调度所有子功能的启停条件、状态管理、优先级协调&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三核心输入信号与传感器&#34;&gt;三、核心输入信号与传感器&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;信号&lt;/th&gt;
          &lt;th&gt;来源&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;HDMap 车道级路径&lt;/td&gt;
          &lt;td&gt;高精地图&lt;/td&gt;
          &lt;td&gt;提供主路至出口的导航路径点&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;当前车道线边界&lt;/td&gt;
          &lt;td&gt;前向摄像头&lt;/td&gt;
          &lt;td&gt;用于 LCC/Lane Keep 模块参考&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;前车位置/速度&lt;/td&gt;
          &lt;td&gt;毫米波雷达 + 感知融合&lt;/td&gt;
          &lt;td&gt;ACC模块依赖的前车信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;侧后目标状态&lt;/td&gt;
          &lt;td&gt;盲区雷达 + 摄像头&lt;/td&gt;
          &lt;td&gt;ALC判断变道安全性使用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;驾驶员意图状态&lt;/td&gt;
          &lt;td&gt;HMI/方向盘&lt;/td&gt;
          &lt;td&gt;用于变道确认与授权&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;转向灯状态&lt;/td&gt;
          &lt;td&gt;BCM&lt;/td&gt;
          &lt;td&gt;判断主动变道与退出需求&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四控制状态机与调度逻辑&#34;&gt;四、控制状态机与调度逻辑&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;功能激活条件&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;结构化道路、导航有效、双车道线有效、自车速度在范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块调度优先级（示例）&lt;/strong&gt;：
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 默认执行 LCC + ACC（车道保持 + 跟车）
- 检测到出口/导航指令 → Path Plan 触发变道计划
- 检查变道安全性（侧后方安全 + 目标车速差）
- 安全 → ALC 执行变道 + 显示动画
- 异常中断（转向灯、方向盘接管、车道线丢失） → 退出NOP，恢复普通辅助驾驶
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;场景切换示意图&lt;/strong&gt;（可后续补图）&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;五典型问题与设计对策&#34;&gt;五、典型问题与设计对策&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;问题&lt;/th&gt;
          &lt;th&gt;原因&lt;/th&gt;
          &lt;th&gt;对策&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;误触发变道&lt;/td&gt;
          &lt;td&gt;导航路径误差 or 道路标识偏差&lt;/td&gt;
          &lt;td&gt;增加“变道缓冲区”逻辑，组合地图与感知一致性判断&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;驾驶员频繁接管&lt;/td&gt;
          &lt;td&gt;安全判断过于保守 or 控制不自然&lt;/td&gt;
          &lt;td&gt;优化ALC控制平滑度 + 引入驾驶员偏好模型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;出口驶出失败&lt;/td&gt;
          &lt;td&gt;检测时机过晚，变道窗口关闭&lt;/td&gt;
          &lt;td&gt;提前发出“即将驶出”提示，延长策略窗口&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;六模块协同与功能节奏图&#34;&gt;六、模块协同与功能节奏图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能节奏节点示例&lt;/strong&gt;（SOP前3个月内需完成）：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/nop%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E5%86%B3%E7%AD%96%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/nop%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E5%86%B3%E7%AD%96%E8%B7%AF%E5%BE%84/</guid>
      <description>&lt;h2 id=&#34;nopnavigate-on-pilot主要功能设计逻辑概览&#34;&gt;NOP（Navigate on Pilot）主要功能设计逻辑概览&lt;/h2&gt;
&lt;p&gt;NOP 是基于pilot功能基础上,实现高速变道超车,下匝道,&lt;/p&gt;
&lt;p&gt;NOP功能的状态跳转还是比较复杂的，涉及横向、纵向控制与功能降级等逻辑配合多源感知与导航模块完成行为判断与控制转换。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一设计目标&#34;&gt;一、设计目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提供高速公路场景下从“上高速 → 巡航 → 超车变道 → 导航出高速”的闭环智能驾驶体验&lt;/li&gt;
&lt;li&gt;支持用户切入、退出、过渡等操作&lt;/li&gt;
&lt;li&gt;在安全性优先的前提下，尽可能实现高效与流畅的驾驶控制&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二核心状态机结构nop-functional-state-machine&#34;&gt;二、核心状态机结构（NOP Functional State Machine）&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;stateDiagram-v2
    [*] --&amp;gt; Idle
    Idle --&amp;gt; Activated : 用户开启NOP
    Activated --&amp;gt; Cruise : 成功识别车道 + 导航同步
    Cruise --&amp;gt; LaneChange : 策略触发变道
    LaneChange --&amp;gt; Cruise : 变道完成
    Cruise --&amp;gt; ExitPreparation : 出口识别提前准备
    ExitPreparation --&amp;gt; ExitExecution : 到达出口区
    ExitExecution --&amp;gt; Idle : NOP退出或用户接管
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;三状态说明&#34;&gt;三、状态说明&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;状态名&lt;/th&gt;
          &lt;th&gt;含义说明&lt;/th&gt;
          &lt;th&gt;触发条件&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Idle&lt;/td&gt;
          &lt;td&gt;NOP未激活或退出状态&lt;/td&gt;
          &lt;td&gt;用户未启用NOP / 驶出高速&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Activated&lt;/td&gt;
          &lt;td&gt;系统初始化并准备启用巡航&lt;/td&gt;
          &lt;td&gt;用户点击NOP按钮，车速/车道满足条件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Cruise&lt;/td&gt;
          &lt;td&gt;进入自动巡航，包括车道保持 + ACC跟车&lt;/td&gt;
          &lt;td&gt;系统感知良好，导航同步，无异常事件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;LaneChange&lt;/td&gt;
          &lt;td&gt;触发主动变道（超车 / 路况避障）&lt;/td&gt;
          &lt;td&gt;策略模块判断变道条件满足&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ExitPreparation&lt;/td&gt;
          &lt;td&gt;提前感知导航出口，准备变道至出口车道&lt;/td&gt;
          &lt;td&gt;与导航路径匹配，出口识别提前量足够&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ExitExecution&lt;/td&gt;
          &lt;td&gt;实施出口变道与减速，并准备交接控制权&lt;/td&gt;
          &lt;td&gt;距离出口不足100m，车道和速度就绪&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四策略决策路径decision-logic-path&#34;&gt;四、策略决策路径（Decision Logic Path）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;启动 → 是否满足最低NOP开启条件？
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     → 是 → 判断导航是否同步？
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         → 是 → 进入巡航状态（车道保持 + 跟车）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             → 前车趋势预判:前车慢？右侧车道是否可变:侧后空？→ 触发 变道意图 → 意图存在,自动打方向灯 → 控制模块执行变道
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             → 导航出口匹配？提前变道？→ 出口准备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         → 否 → 保持手动驾驶或提示同步失败
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     → 否 → 禁用NOP，提示“条件不满足”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;五模块交互简图配合时序图使用&#34;&gt;五、模块交互简图（配合时序图使用）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用户交互（启动、退出、转向灯） ↔ NOP 控制状态机&lt;/li&gt;
&lt;li&gt;感知输入（车道、车辆、障碍） → 策略模块（是否变道）&lt;/li&gt;
&lt;li&gt;导航模块（出口路径） → 策略模块（是否切换车道）&lt;/li&gt;
&lt;li&gt;控制模块 ← 状态机指令（加速、减速、横向控制）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;该状态机设计确保了：&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E4%B8%8A%E7%BA%BF%E5%9C%BA%E6%99%AF%E6%A2%B3%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E4%B8%8A%E7%BA%BF%E5%9C%BA%E6%99%AF%E6%A2%B3%E7%90%86/</guid>
      <description>&lt;p&gt;用户旅程地图，它已成为需求分析和产品设计不可或缺的环节。用户旅程地图主要与需求分析联动，用于挖掘用户真实场景与行为动机；
然后系统功能设计再从用户旅程中提取出具体的“上线场景”（功能需求）进入系统设计。&lt;/p&gt;
&lt;p&gt;一、用户旅程地图是什么
用户旅程（User Journey）是用户完成某个任务或者达到某个目标的全过程, 它是分析用户旅程的可视化工具之一。它是一个有方向的信息图表（按照时间线，从左往右），从用户的角度出发、以讲故事的方式，清晰地描述用户在某个业务场景下完成任务或达到目标时的详细过程和体验。
完整的用户旅程包含用户模型、可视化的体验过程和机会点三部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要构造用户旅程地图，我们首先需要构建用户模型。即用户群体是谁，想要在什么样的业务场景下，达成什么样的目标。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这部分的信息通常来源于用户研究，比如用户访谈、问卷调查、及实地观察等。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可视化的体验过程
这是用户旅程地图中最重要的组成部分，描述用户在达成目标时的全过程，及在每个过程中的情感体验。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这部分的信息可以来自于用户研究，也可以邀请用户一起完成。&lt;/p&gt;
&lt;p&gt;它包含5个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键活动。用户在该业务场景下达成目标时的关键活动，按照时间顺序，从左往右依次排列。需要注意的是，关键活动的颗粒度是相对的。比如，你可以用它放眼全局，来描绘一个上班族的一天；也可以聚焦到早起上班这一个特定的场景。但这两个地图中的关键活动的颗粒度明显不一样，第二种场景下的关键活动很可能只是第一种场景下的一个具体行为。&lt;/li&gt;
&lt;li&gt;具体行为。用户在完成每个关键活动时的具体行为，每个行为同样按照时间先后顺序从左往右依次排列。行为是从关键活动中分解出来的，比如在早起上班这个旅程中，“早餐”是一个关键活动，我们可以分解出备菜、烹饪、吃早餐、收拾餐盘等行为。&lt;/li&gt;
&lt;li&gt;触点。用户在进行每个行为时所使用的工具或者产品功能等。这取决于你的用户旅程地图用来干什么。如果是为了分析某个业务流程，那么触点可能是在该业务流程中所使用的工具，如手机、电脑，闹钟等物理工具，或邮件、地图、微信等数字化工具；如果是为了分析用户使用某个产品的全过程，那么触点可以是该产品的功能或特性。&lt;/li&gt;
&lt;li&gt;心情曲线。用户在该旅程中的情感体验，描绘用户在进行每个行为时的心情，高兴还是不高兴，然后连成一条线，即心情曲线。&lt;/li&gt;
&lt;li&gt;痛点。用户进行每个行为时遇到的问题、困难和挑战。心情曲线比较低的部分通常伴随着明显的用户痛点。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;机会点
这是从体验过程中挖掘到的优化用户旅程的洞见、改善用户痛点的契机等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可视化的体验过程是真实存在的，它来源于用户。而机会点则是由需求分析或产品设计人员通过分析用户痛点和期望得到的，当然，也可以研究市场趋势、了解竞争对手的做法。&lt;/p&gt;
&lt;p&gt;由此可见，该地图不仅可以用来表述故事发生的过程，还可以用来分析用户的体验。&lt;/p&gt;
&lt;p&gt;从用户模型建立到功能上线，整个流程包括
用户调研 / 产品目标
↓
用户需求分析（用户目标、行为、痛点）
↓           ←←←←←←←←←←←←←←
用户旅程地图（阶段划分+用户行为+系统反应+情绪）
↓                            ↑
上线场景梳理（功能需求表）       ↑ 可用于校验场景完整性
↓
功能子目标拆解 + 模块设计 + 投放节奏图&lt;/p&gt;
&lt;p&gt;以自动变道为例：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;阶段&lt;/th&gt;
          &lt;th&gt;用户旅程地图中的表达&lt;/th&gt;
          &lt;th&gt;上线场景表中的表达&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;自动变道&lt;/td&gt;
          &lt;td&gt;用户希望无操作也能高效超车，担心变道是否安全&lt;/td&gt;
          &lt;td&gt;系统需在安全条件满足时触发自动变道策略&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;痛点机会&lt;/td&gt;
          &lt;td&gt;用户想知道变道的理由&lt;/td&gt;
          &lt;td&gt;系统应提供变道决策依据或提示信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;系统反应&lt;/td&gt;
          &lt;td&gt;策略触发变道，执行控制&lt;/td&gt;
          &lt;td&gt;轨迹规划模块 + 安全判断模块 + 控制模块&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt=&#34;用户旅程地图&#34; loading=&#34;lazy&#34; src=&#34;/static/images/%E7%94%A8%E6%88%B7%E6%97%85%E7%A8%8B%E5%9C%B0%E5%9B%BE.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;以下问题均为系统集成、功能联调或用户体验验证中常见的“典型闭环问题”，适用于 NOP、APA、ACC、LKA 等功能场景。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一变道类问题nop--noa&#34;&gt;一、变道类问题（NOP / NOA）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变道轨迹抖动 / 折线过多，影响车辆平顺性&lt;/li&gt;
&lt;li&gt;动作触发延迟，导致错过变道时机&lt;/li&gt;
&lt;li&gt;插队判断错误，未能正确识别目标车道间距&lt;/li&gt;
&lt;li&gt;导航目标车道识别偏差，影响入口/出口变道&lt;/li&gt;
&lt;li&gt;自主变道成功后未正确恢复至原始路径&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二泊车类问题apa&#34;&gt;二、泊车类问题（APA）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;泊车位识别偏移，车辆偏离泊车线&lt;/li&gt;
&lt;li&gt;倒车入位时轨迹溢出安全范围&lt;/li&gt;
&lt;li&gt;APA 识别过程误将墙面、栏杆识别为车位&lt;/li&gt;
&lt;li&gt;泊车起始位置不合理，导致 APA 无法生成可行轨迹&lt;/li&gt;
&lt;li&gt;驻车后未触发自动切换 P 挡 / 驻车制动状态异常&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三跟车类问题acc--tja&#34;&gt;三、跟车类问题（ACC / TJA）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前车减速响应延迟，跟车距离拉近过快&lt;/li&gt;
&lt;li&gt;误判静止物体为运动目标导致急刹&lt;/li&gt;
&lt;li&gt;在拥堵工况中频繁启停，舒适性差&lt;/li&gt;
&lt;li&gt;跟车目标丢失时未及时降级退出 ACC 状态&lt;/li&gt;
&lt;li&gt;默认加速度 / 跟车间距配置过大或过小，体验不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四横纵向控制类问题lka--planning&#34;&gt;四、横纵向控制类问题（LKA / Planning）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LKA 中车辆偏离车道线但未及时介入&lt;/li&gt;
&lt;li&gt;弯道中曲率变化过快，导致控制器震荡&lt;/li&gt;
&lt;li&gt;轨迹规划不连续，目标点抖动&lt;/li&gt;
&lt;li&gt;控制指令变化陡峭，引发急转或急加速&lt;/li&gt;
&lt;li&gt;转向指令与当前车速不匹配，导致过弯困难&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;五感知--状态识别类问题&#34;&gt;五、感知 &amp;amp; 状态识别类问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;静态障碍识别误报，影响轨迹生成&lt;/li&gt;
&lt;li&gt;交通灯状态识别错误，导致刹停失败&lt;/li&gt;
&lt;li&gt;车道线检测置信度低，影响路径规划&lt;/li&gt;
&lt;li&gt;车辆定位误差大于可接受范围（&amp;gt; 0.5m）&lt;/li&gt;
&lt;li&gt;上下匝道判断逻辑错误，导致路径漂移&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;六模块接口--策略交互类问题&#34;&gt;六、模块接口 / 策略交互类问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;感知与规划模块的坐标系不一致&lt;/li&gt;
&lt;li&gt;置信度阈值设置不合理，导致过早/过晚触发切换&lt;/li&gt;
&lt;li&gt;策略端参数配置未与实际功能同步（如最大变道时间）&lt;/li&gt;
&lt;li&gt;轨迹下发频率与控制器采样周期不匹配&lt;/li&gt;
&lt;li&gt;模块状态切换条件不一致，影响降级退出流程&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;七用户体验--非功能性问题&#34;&gt;七、用户体验 / 非功能性问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变道过程中方向盘突然介入，造成“吓人”体验&lt;/li&gt;
&lt;li&gt;倒车过程中音响提示与车速不一致&lt;/li&gt;
&lt;li&gt;自动泊车未显示进度/状态信息，缺乏可感知反馈&lt;/li&gt;
&lt;li&gt;能力触发门槛过高，用户难以体验完整流程&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E8%BF%AD%E4%BB%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%E8%BF%AD%E4%BB%A3/</guid>
      <description>&lt;p&gt;关键功能的设计逻辑图（状态机 + 决策路径）&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E7%94%A8%E6%88%B7%E6%97%85%E7%A8%8B%E5%9C%B0%E5%9B%BE%E4%B8%8E%E4%B8%8A%E7%BA%BF%E5%9C%BA%E6%99%AF%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E7%94%A8%E6%88%B7%E6%97%85%E7%A8%8B%E5%9C%B0%E5%9B%BE%E4%B8%8E%E4%B8%8A%E7%BA%BF%E5%9C%BA%E6%99%AF%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;用户旅程地图&#34; loading=&#34;lazy&#34; src=&#34;/images/%E7%94%A8%E6%88%B7%E6%97%85%E7%A8%8B%E5%9C%B0%E5%9B%BE.png&#34;&gt;
用户旅程地图，它已成为需求分析和产品设计不可或缺的环节。用户旅程地图主要与需求分析联动，用于挖掘用户真实场景与行为动机；然后系统功能设计再从用户旅程中提取出具体的“上线场景”（功能需求）进入系统设计。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;一用户旅程地图是什么&#34;&gt;一、用户旅程地图是什么&lt;/h2&gt;
&lt;p&gt;用户旅程（User Journey）是用户完成某个任务或者达到某个目标的全过程, 它是分析用户旅程的可视化工具之一。它是一个有方向的信息图表（按照时间线，从左往右），从用户的角度出发、以讲故事的方式，清晰地描述用户在某个业务场景下完成任务或达到目标时的详细过程和体验。&lt;/p&gt;
&lt;p&gt;完整的用户旅程包含用户模型、可视化的体验过程和机会点三部分。&lt;/p&gt;
&lt;h3 id=&#34;1-用户模型&#34;&gt;1. 用户模型&lt;/h3&gt;
&lt;p&gt;要构造用户旅程地图，我们首先需要构建用户模型。即用户群体是谁，想要在什么样的业务场景下，达成什么样的目标。&lt;/p&gt;
&lt;p&gt;这部分的信息通常来源于用户研究，比如用户访谈、问卷调查、及实地观察等。&lt;/p&gt;
&lt;h3 id=&#34;2-可视化的体验过程&#34;&gt;2. 可视化的体验过程&lt;/h3&gt;
&lt;p&gt;这是用户旅程地图中最重要的组成部分，描述用户在达成目标时的全过程，及在每个过程中的情感体验。这部分的信息可以来自于用户研究，也可以邀请用户一起完成。&lt;/p&gt;
&lt;p&gt;它包含 5 个元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键活动&lt;/strong&gt;：用户在该业务场景下达成目标时的关键活动，按时间顺序排列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体行为&lt;/strong&gt;：每个关键活动下的具体操作步骤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触点&lt;/strong&gt;：用户在每个行为中接触的工具、系统或产品功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心情曲线&lt;/strong&gt;：用户在行为过程中的情绪高低，通常用线图或 Emoji 表示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;痛点&lt;/strong&gt;：行为过程中遇到的挑战或不适体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-机会点&#34;&gt;3. 机会点&lt;/h3&gt;
&lt;p&gt;这是从体验过程中挖掘到的优化用户旅程的洞见、改善用户痛点的契机等。&lt;br&gt;
机会点不是来源于用户，而是由产品经理或需求分析人员通过“对心情曲线与痛点的理解”推导得出。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二用户旅程地图与上线场景的联动关系&#34;&gt;二、用户旅程地图与上线场景的联动关系&lt;/h2&gt;
&lt;p&gt;用户旅程地图不仅可以用来讲述用户故事，更是连接“用户需求”与“功能上线规划”的桥梁：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;用户调研 / 产品目标
    ↓
用户需求分析（用户目标、行为、痛点）
    ↓           ←←←←←←←←←←←←←←
用户旅程地图（阶段划分 + 用户行为 + 系统反应 + 情绪）
    ↓                            ↑
上线场景梳理（功能需求表）       ↑ 可用于校验场景完整性
    ↓
功能子目标拆解 + 模块设计 + 投放节奏图
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;三用户旅程地图与上线场景的对照示例&#34;&gt;三、用户旅程地图与上线场景的对照示例&lt;/h2&gt;
&lt;p&gt;以自动变道为例：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;阶段&lt;/th&gt;
          &lt;th&gt;用户旅程地图中的表达&lt;/th&gt;
          &lt;th&gt;上线场景表中的表达&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;自动变道&lt;/td&gt;
          &lt;td&gt;用户希望无操作也能高效超车，担心变道是否安全&lt;/td&gt;
          &lt;td&gt;系统需在安全条件满足时触发自动变道策略&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;痛点机会&lt;/td&gt;
          &lt;td&gt;用户想知道变道的理由&lt;/td&gt;
          &lt;td&gt;系统应提供变道决策依据或提示信息&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;系统反应&lt;/td&gt;
          &lt;td&gt;策略触发变道，执行控制&lt;/td&gt;
          &lt;td&gt;轨迹规划模块 + 安全判断模块 + 控制模块&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E8%81%94%E8%B0%83%E6%8E%A5%E5%8F%A3%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E8%81%94%E8%B0%83%E6%8E%A5%E5%8F%A3%E5%AF%B9%E9%BD%90/</guid>
      <description>&lt;h1 id=&#34;模块通信接口定义文档感知--规划--控制&#34;&gt;模块通信接口定义文档（感知 / 规划 / 控制）&lt;/h1&gt;
&lt;p&gt;本文档定义了智能驾驶系统中主要功能模块之间的数据通信接口，包含感知模块、规划模块和控制模块，明确其输入输出数据类型、频率、数据格式及依赖配置，确保系统联调与功能集成的稳定性和可扩展性。&lt;/p&gt;
&lt;h1 id=&#34;模块分工与接口定义表感知--规划--控制&#34;&gt;模块分工与接口定义表（感知 / 规划 / 控制）&lt;/h1&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模块&lt;/th&gt;
          &lt;th&gt;主要职责&lt;/th&gt;
          &lt;th&gt;输入接口&lt;/th&gt;
          &lt;th&gt;输出接口&lt;/th&gt;
          &lt;th&gt;依赖参数 / 配置&lt;/th&gt;
          &lt;th&gt;典型异常情况&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;感知模块&lt;/td&gt;
          &lt;td&gt;提供环境建图、障碍物检测、车道线识别等基础信息&lt;/td&gt;
          &lt;td&gt;摄像头、雷达、超声波、IMU 原始数据&lt;/td&gt;
          &lt;td&gt;- 障碍物列表&lt;!-- raw HTML omitted --&gt;- 车道线模型&lt;!-- raw HTML omitted --&gt;- 可通行区域Mask&lt;!-- raw HTML omitted --&gt;- 动态物体预测轨迹&lt;/td&gt;
          &lt;td&gt;感知置信度阈值&lt;!-- raw HTML omitted --&gt;障碍物融合策略&lt;/td&gt;
          &lt;td&gt;静态物体误识别&lt;!-- raw HTML omitted --&gt;车道线断裂&lt;!-- raw HTML omitted --&gt;预测轨迹跳变&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;规划模块&lt;/td&gt;
          &lt;td&gt;基于感知结果和导航目标，生成轨迹并动态调整行为策略&lt;/td&gt;
          &lt;td&gt;- 当前车辆状态&lt;!-- raw HTML omitted --&gt;- 障碍物列表&lt;!-- raw HTML omitted --&gt;- 可通行区域&lt;!-- raw HTML omitted --&gt;- 全局路径&lt;/td&gt;
          &lt;td&gt;- 局部轨迹（轨迹点序列）&lt;!-- raw HTML omitted --&gt;- 行为决策（变道 / 跟车 / 停止）&lt;/td&gt;
          &lt;td&gt;最远预测距离&lt;!-- raw HTML omitted --&gt;轨迹重规划频率&lt;!-- raw HTML omitted --&gt;变道策略参数&lt;/td&gt;
          &lt;td&gt;轨迹折线过多&lt;!-- raw HTML omitted --&gt;变道触发不合理&lt;!-- raw HTML omitted --&gt;变道后不恢复原车道&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;控制模块&lt;/td&gt;
          &lt;td&gt;接收轨迹并计算控制指令（转向 / 加减速）实现车辆执行&lt;/td&gt;
          &lt;td&gt;- 规划轨迹&lt;!-- raw HTML omitted --&gt;- 当前车速 / 横摆角&lt;!-- raw HTML omitted --&gt;- 控制目标点&lt;/td&gt;
          &lt;td&gt;- 方向盘角度&lt;!-- raw HTML omitted --&gt;- 加速度 / 油门开度&lt;!-- raw HTML omitted --&gt;- 制动指令&lt;/td&gt;
          &lt;td&gt;控制频率&lt;!-- raw HTML omitted --&gt;控制器类型（PID/MPC）&lt;!-- raw HTML omitted --&gt;跟踪误差阈值&lt;/td&gt;
          &lt;td&gt;指令跳变&lt;!-- raw HTML omitted --&gt;横向控制震荡&lt;!-- raw HTML omitted --&gt;刹车响应滞后&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-模块功能分工&#34;&gt;1. 模块功能分工&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模块&lt;/th&gt;
          &lt;th&gt;主要职责&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;感知模块&lt;/td&gt;
          &lt;td&gt;环境建图、车道线识别、障碍物检测与跟踪&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;规划模块&lt;/td&gt;
          &lt;td&gt;行为决策（如变道、跟车）、轨迹生成&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;控制模块&lt;/td&gt;
          &lt;td&gt;控制命令输出（转向、加减速），完成车辆运动控制&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-模块间通信接口定义&#34;&gt;2. 模块间通信接口定义&lt;/h2&gt;
&lt;h3 id=&#34;-21-感知--规划&#34;&gt;🔹 2.1 感知 → 规划&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;接口名称&lt;/th&gt;
          &lt;th&gt;数据类型&lt;/th&gt;
          &lt;th&gt;发布频率&lt;/th&gt;
          &lt;th&gt;数据字段示例&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;/perception/obstacles&lt;/td&gt;
          &lt;td&gt;ObstacleArray&lt;/td&gt;
          &lt;td&gt;20 Hz&lt;/td&gt;
          &lt;td&gt;id, position(x,y), velocity, type, confidence&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/perception/lane&lt;/td&gt;
          &lt;td&gt;LaneModel&lt;/td&gt;
          &lt;td&gt;20 Hz&lt;/td&gt;
          &lt;td&gt;lane_id, coeffs(a,b,c), confidence&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/perception/area&lt;/td&gt;
          &lt;td&gt;DrivableArea&lt;/td&gt;
          &lt;td&gt;10 Hz&lt;/td&gt;
          &lt;td&gt;polygon_mask, timestamp&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-22-规划--控制&#34;&gt;🔹 2.2 规划 → 控制&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;接口名称&lt;/th&gt;
          &lt;th&gt;数据类型&lt;/th&gt;
          &lt;th&gt;发布频率&lt;/th&gt;
          &lt;th&gt;数据字段示例&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;/planning/trajectory&lt;/td&gt;
          &lt;td&gt;Trajectory&lt;/td&gt;
          &lt;td&gt;50 Hz&lt;/td&gt;
          &lt;td&gt;points[x,y,v,acc,yaw], timestamp&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/planning/behavior&lt;/td&gt;
          &lt;td&gt;BehaviorState&lt;/td&gt;
          &lt;td&gt;10 Hz&lt;/td&gt;
          &lt;td&gt;state_type (lane_following, lane_change, stop), duration&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-23-感知--控制直接辅助控制冗余通道&#34;&gt;🔹 2.3 感知 → 控制（直接辅助控制冗余通道）&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;接口名称&lt;/th&gt;
          &lt;th&gt;数据类型&lt;/th&gt;
          &lt;th&gt;发布频率&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;/perception/yaw_rate&lt;/td&gt;
          &lt;td&gt;Float32&lt;/td&gt;
          &lt;td&gt;100 Hz&lt;/td&gt;
          &lt;td&gt;高频率反馈用于横向控制辅助&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/imu/data&lt;/td&gt;
          &lt;td&gt;IMUData&lt;/td&gt;
          &lt;td&gt;100 Hz&lt;/td&gt;
          &lt;td&gt;惯性导航传感器数据&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-配置参数依赖项&#34;&gt;3. 配置参数依赖项&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模块&lt;/th&gt;
          &lt;th&gt;参数名称&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;感知&lt;/td&gt;
          &lt;td&gt;lane_conf_threshold&lt;/td&gt;
          &lt;td&gt;车道线识别的最低置信度&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;规划&lt;/td&gt;
          &lt;td&gt;lane_change_timeout&lt;/td&gt;
          &lt;td&gt;变道超时时间设置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;控制&lt;/td&gt;
          &lt;td&gt;lateral_ctrl_gain&lt;/td&gt;
          &lt;td&gt;横向 PID 控制器增益参数&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-常见接口问题与调试建议&#34;&gt;4. 常见接口问题与调试建议&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;问题描述&lt;/th&gt;
          &lt;th&gt;可能原因&lt;/th&gt;
          &lt;th&gt;调试建议&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;轨迹点跳变 / 抖动&lt;/td&gt;
          &lt;td&gt;感知误差大，置信度低&lt;/td&gt;
          &lt;td&gt;检查感知数据时间同步与滤波器配置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;控制器响应滞后&lt;/td&gt;
          &lt;td&gt;轨迹点更新频率低&lt;/td&gt;
          &lt;td&gt;提高轨迹发布频率，调整控制器采样率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;行为状态误判（频繁进入lane_change）&lt;/td&gt;
          &lt;td&gt;规则配置阈值过低 / 误判插队&lt;/td&gt;
          &lt;td&gt;优化状态机转移条件，结合多维输入决策&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-接口格式示例ros-message&#34;&gt;5. 接口格式示例（ROS Message）&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Trajectory.msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Header header
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TrajectoryPoint[] points
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# TrajectoryPoint.msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;float64 x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;float64 y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;float64 v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;float64 acc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;float64 yaw
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;本接口定义文档将随系统演进持续迭代更新，版本记录详见附录。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>/posts/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%92%8C%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/posts/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%92%8C%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;基于用户体验目标与典型使用场景，对需求进行逐步细化，最终转化为可实现的功能设计。&lt;/p&gt;
&lt;h3 id=&#34;以nop和apa为例&#34;&gt;以NOP和APA为例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NOP(Navigation On Pilot)
&lt;ul&gt;
&lt;li&gt;功能目标：高速场景下的智能导航驾驶&lt;/li&gt;
&lt;li&gt;上线场景（典型使用场景）：
&lt;ul&gt;
&lt;li&gt;高速主路&lt;/li&gt;
&lt;li&gt;自动变道（超车 / 躲避慢车）&lt;/li&gt;
&lt;li&gt;主路汇入匝道&lt;/li&gt;
&lt;li&gt;匝道驶出并与导航交互&lt;/li&gt;
&lt;li&gt;弯道曲率适配控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOP（Navigate on Pilot）功能需求与设计拆解表&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;上线场景&lt;/th&gt;
          &lt;th&gt;功能需求（What）&lt;/th&gt;
          &lt;th&gt;子需求（细化 What）&lt;/th&gt;
          &lt;th&gt;所属模块&lt;/th&gt;
          &lt;th&gt;功能设计（How）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;高速主路巡航&lt;/td&gt;
          &lt;td&gt;保持车辆在当前车道稳定巡航&lt;/td&gt;
          &lt;td&gt;识别清晰车道线，维持居中行驶&lt;/td&gt;
          &lt;td&gt;感知 / 控制&lt;/td&gt;
          &lt;td&gt;车道线识别 + 轨迹偏移计算 + PID 控制器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;抑制车道线虚假识别干扰&lt;/td&gt;
          &lt;td&gt;感知&lt;/td&gt;
          &lt;td&gt;多源融合 + 稳定性判别机制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;主路跟车&lt;/td&gt;
          &lt;td&gt;前方有车时能稳定跟随并保持安全车距&lt;/td&gt;
          &lt;td&gt;实时识别前车位置与速度&lt;/td&gt;
          &lt;td&gt;感知&lt;/td&gt;
          &lt;td&gt;雷达+视觉融合检测，计算相对距离&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;动态调整跟车距离与加速度&lt;/td&gt;
          &lt;td&gt;控制 / 策略&lt;/td&gt;
          &lt;td&gt;ACC控制策略 + 自适应速度规划&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;自动变道（超车/避障）&lt;/td&gt;
          &lt;td&gt;根据策略与环境条件安全触发并完成变道动作&lt;/td&gt;
          &lt;td&gt;判断变道时机（前车慢、侧方可变道）&lt;/td&gt;
          &lt;td&gt;感知 / 策略&lt;/td&gt;
          &lt;td&gt;速度判断 + 安全空隙评估模块&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;规划变道路径并执行横向平滑过渡&lt;/td&gt;
          &lt;td&gt;规划 / 控制&lt;/td&gt;
          &lt;td&gt;五阶轨迹规划 + LQR横向控制器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;主路汇入匝道&lt;/td&gt;
          &lt;td&gt;在即将进入匝道前自动切入合适车道&lt;/td&gt;
          &lt;td&gt;提前识别出口与汇入点&lt;/td&gt;
          &lt;td&gt;定位 / 感知&lt;/td&gt;
          &lt;td&gt;HD地图出口匹配 + 定位融合模块&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;生成合理汇入路径并协调控制器执行&lt;/td&gt;
          &lt;td&gt;规划 / 控制&lt;/td&gt;
          &lt;td&gt;插入轨迹规划 + 速度过渡控制&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;匝道驶出与导航联动&lt;/td&gt;
          &lt;td&gt;出高速并进入本地路段，顺利切换控制与路线逻辑&lt;/td&gt;
          &lt;td&gt;出口匹配导航并生成分岔路线决策&lt;/td&gt;
          &lt;td&gt;感知 / 交互&lt;/td&gt;
          &lt;td&gt;导航路径同步模块 + 分岔点策略决策&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;平滑完成车道切换并保持目标路线&lt;/td&gt;
          &lt;td&gt;控制 / 状态机&lt;/td&gt;
          &lt;td&gt;状态迁移控制逻辑 + 轨迹融合&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;弯道曲率适配控制&lt;/td&gt;
          &lt;td&gt;根据道路曲率调整车速与横向控制，保证安全与舒适性&lt;/td&gt;
          &lt;td&gt;实时感知路段曲率，并动态控制转向&lt;/td&gt;
          &lt;td&gt;感知 / 控制&lt;/td&gt;
          &lt;td&gt;曲率计算模块 + 控制器参数调节&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;弯道内速度限制及横向加速度限制策略&lt;/td&gt;
          &lt;td&gt;策略 / 控制&lt;/td&gt;
          &lt;td&gt;最大侧向加速度阈值设定 + 速度规划器&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;apa&#34;&gt;APA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;APA（Auto Parkign Assist）
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能目标：在多种复杂车位场景中，系统能自动完成自动泊入/泊出，覆盖多类车位&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
